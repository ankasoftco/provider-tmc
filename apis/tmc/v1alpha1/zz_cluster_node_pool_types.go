/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type Cluster_Node_PoolMetaObservation struct {

	// Annotations for the resource
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Description of the resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Labels for the resource
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Resource version of the resource
	ResourceVersion *string `json:"resourceVersion,omitempty" tf:"resource_version,omitempty"`

	// UID of the resource
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type Cluster_Node_PoolMetaParameters struct {

	// Annotations for the resource
	// +kubebuilder:validation:Optional
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Description of the resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Labels for the resource
	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`
}

type Cluster_Node_PoolObservation struct {

	// Name of the cluster
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Name of the management cluster
	ManagementClusterName *string `json:"managementClusterName,omitempty" tf:"management_cluster_name,omitempty"`

	// Metadata for the resource
	Meta []Cluster_Node_PoolMetaObservation `json:"meta,omitempty" tf:"meta,omitempty"`

	// Name of this nodepool
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Provisioner of the cluster
	ProvisionerName *string `json:"provisionerName,omitempty" tf:"provisioner_name,omitempty"`

	// Wait timeout duration until nodepool resource reaches READY state. Accepted timeout duration values like 5s, 45m, or 3h, higher than zero.
	ReadyWaitTimeout *string `json:"readyWaitTimeout,omitempty" tf:"ready_wait_timeout,omitempty"`

	// Spec for the cluster nodepool
	Spec []Cluster_Node_PoolSpecObservation `json:"spec,omitempty" tf:"spec,omitempty"`

	// Status of node pool resource
	Status map[string]*string `json:"status,omitempty" tf:"status,omitempty"`
}

type Cluster_Node_PoolParameters struct {

	// Name of the cluster
	// +kubebuilder:validation:Optional
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	// Name of the management cluster
	// +kubebuilder:validation:Optional
	ManagementClusterName *string `json:"managementClusterName,omitempty" tf:"management_cluster_name,omitempty"`

	// Metadata for the resource
	// +kubebuilder:validation:Optional
	Meta []Cluster_Node_PoolMetaParameters `json:"meta,omitempty" tf:"meta,omitempty"`

	// Name of this nodepool
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Provisioner of the cluster
	// +kubebuilder:validation:Optional
	ProvisionerName *string `json:"provisionerName,omitempty" tf:"provisioner_name,omitempty"`

	// Wait timeout duration until nodepool resource reaches READY state. Accepted timeout duration values like 5s, 45m, or 3h, higher than zero.
	// +kubebuilder:validation:Optional
	ReadyWaitTimeout *string `json:"readyWaitTimeout,omitempty" tf:"ready_wait_timeout,omitempty"`

	// Spec for the cluster nodepool
	// +kubebuilder:validation:Optional
	Spec []Cluster_Node_PoolSpecParameters `json:"spec,omitempty" tf:"spec,omitempty"`
}

type Cluster_Node_PoolSpecObservation struct {

	// Cloud labels
	CloudLabels map[string]*string `json:"cloudLabels,omitempty" tf:"cloud_labels,omitempty"`

	// Node labels
	NodeLabels map[string]*string `json:"nodeLabels,omitempty" tf:"node_labels,omitempty"`

	// TKGAWSNodepool is the nodepool spec for TKG AWS cluster
	TkgAws []Cluster_Node_PoolSpecTkgAwsObservation `json:"tkgAws,omitempty" tf:"tkg_aws,omitempty"`

	// TKGServiceVsphereNodepool is the nodepool spec for TKG service vsphere cluster
	TkgServiceVsphere []Cluster_Node_PoolSpecTkgServiceVsphereObservation `json:"tkgServiceVsphere,omitempty" tf:"tkg_service_vsphere,omitempty"`

	// TkgVsphereNodepool is the nodepool config for the TKG vsphere cluster
	TkgVsphere []Cluster_Node_PoolSpecTkgVsphereObservation `json:"tkgVsphere,omitempty" tf:"tkg_vsphere,omitempty"`

	// Count is the number of nodes
	WorkerNodeCount *string `json:"workerNodeCount,omitempty" tf:"worker_node_count,omitempty"`
}

type Cluster_Node_PoolSpecParameters struct {

	// Cloud labels
	// +kubebuilder:validation:Optional
	CloudLabels map[string]*string `json:"cloudLabels,omitempty" tf:"cloud_labels,omitempty"`

	// Node labels
	// +kubebuilder:validation:Optional
	NodeLabels map[string]*string `json:"nodeLabels,omitempty" tf:"node_labels,omitempty"`

	// TKGAWSNodepool is the nodepool spec for TKG AWS cluster
	// +kubebuilder:validation:Optional
	TkgAws []Cluster_Node_PoolSpecTkgAwsParameters `json:"tkgAws,omitempty" tf:"tkg_aws,omitempty"`

	// TKGServiceVsphereNodepool is the nodepool spec for TKG service vsphere cluster
	// +kubebuilder:validation:Optional
	TkgServiceVsphere []Cluster_Node_PoolSpecTkgServiceVsphereParameters `json:"tkgServiceVsphere,omitempty" tf:"tkg_service_vsphere,omitempty"`

	// TkgVsphereNodepool is the nodepool config for the TKG vsphere cluster
	// +kubebuilder:validation:Optional
	TkgVsphere []Cluster_Node_PoolSpecTkgVsphereParameters `json:"tkgVsphere,omitempty" tf:"tkg_vsphere,omitempty"`

	// Count is the number of nodes
	// +kubebuilder:validation:Required
	WorkerNodeCount *string `json:"workerNodeCount" tf:"worker_node_count,omitempty"`
}

type Cluster_Node_PoolSpecTkgAwsObservation struct {

	// Nodepool instance type
	Class *string `json:"class,omitempty" tf:"class,omitempty"`

	// Storage Class to be used for storage of the disks which store the root filesystem of the nodes
	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`
}

type Cluster_Node_PoolSpecTkgAwsParameters struct {

	// Nodepool instance type
	// +kubebuilder:validation:Optional
	Class *string `json:"class,omitempty" tf:"class,omitempty"`

	// Storage Class to be used for storage of the disks which store the root filesystem of the nodes
	// +kubebuilder:validation:Optional
	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`
}

type Cluster_Node_PoolSpecTkgServiceVsphereObservation struct {

	// Nodepool instance type
	Class *string `json:"class,omitempty" tf:"class,omitempty"`

	// Configure the failure domain of node pool. The potential values could be found using cluster:options api. This parameter will be ignored by the backend if the TKG service vsphere cluster doesn't support.
	FailureDomain *string `json:"failureDomain,omitempty" tf:"failure_domain,omitempty"`

	// Storage Class to be used for storage of the disks which store the root filesystem of the nodes
	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`

	// Configurable volumes for nodepool nodes
	Volumes []SpecTkgServiceVsphereVolumesObservation `json:"volumes,omitempty" tf:"volumes,omitempty"`
}

type Cluster_Node_PoolSpecTkgServiceVsphereParameters struct {

	// Nodepool instance type
	// +kubebuilder:validation:Required
	Class *string `json:"class" tf:"class,omitempty"`

	// Configure the failure domain of node pool. The potential values could be found using cluster:options api. This parameter will be ignored by the backend if the TKG service vsphere cluster doesn't support.
	// +kubebuilder:validation:Optional
	FailureDomain *string `json:"failureDomain,omitempty" tf:"failure_domain,omitempty"`

	// Storage Class to be used for storage of the disks which store the root filesystem of the nodes
	// +kubebuilder:validation:Required
	StorageClass *string `json:"storageClass" tf:"storage_class,omitempty"`

	// Configurable volumes for nodepool nodes
	// +kubebuilder:validation:Optional
	Volumes []SpecTkgServiceVsphereVolumesParameters `json:"volumes,omitempty" tf:"volumes,omitempty"`
}

type Cluster_Node_PoolSpecTkgVsphereObservation struct {

	// VM specific configuration
	VMConfig []SpecTkgVsphereVMConfigObservation `json:"vmConfig,omitempty" tf:"vm_config,omitempty"`
}

type Cluster_Node_PoolSpecTkgVsphereParameters struct {

	// VM specific configuration
	// +kubebuilder:validation:Required
	VMConfig []SpecTkgVsphereVMConfigParameters `json:"vmConfig" tf:"vm_config,omitempty"`
}

type SpecTkgServiceVsphereVolumesObservation struct {

	// Volume capacity is in gib
	Capacity *float64 `json:"capacity,omitempty" tf:"capacity,omitempty"`

	// It is the directory where the volume device is to be mounted
	MountPath *string `json:"mountPath,omitempty" tf:"mount_path,omitempty"`

	// It is the volume name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// This is the storage class for PVC which in case omitted, default storage class will be used for the disks
	PvcStorageClass *string `json:"pvcStorageClass,omitempty" tf:"pvc_storage_class,omitempty"`
}

type SpecTkgServiceVsphereVolumesParameters struct {

	// Volume capacity is in gib
	// +kubebuilder:validation:Optional
	Capacity *float64 `json:"capacity,omitempty" tf:"capacity,omitempty"`

	// It is the directory where the volume device is to be mounted
	// +kubebuilder:validation:Optional
	MountPath *string `json:"mountPath,omitempty" tf:"mount_path,omitempty"`

	// It is the volume name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// This is the storage class for PVC which in case omitted, default storage class will be used for the disks
	// +kubebuilder:validation:Optional
	PvcStorageClass *string `json:"pvcStorageClass,omitempty" tf:"pvc_storage_class,omitempty"`
}

type SpecTkgVsphereVMConfigObservation struct {

	// Number of CPUs per node
	CPU *string `json:"cpu,omitempty" tf:"cpu,omitempty"`

	// Root disk size in gigabytes for the VM
	DiskSize *string `json:"diskSize,omitempty" tf:"disk_size,omitempty"`

	// Memory associated with the node in megabytes
	Memory *string `json:"memory,omitempty" tf:"memory,omitempty"`
}

type SpecTkgVsphereVMConfigParameters struct {

	// Number of CPUs per node
	// +kubebuilder:validation:Optional
	CPU *string `json:"cpu,omitempty" tf:"cpu,omitempty"`

	// Root disk size in gigabytes for the VM
	// +kubebuilder:validation:Optional
	DiskSize *string `json:"diskSize,omitempty" tf:"disk_size,omitempty"`

	// Memory associated with the node in megabytes
	// +kubebuilder:validation:Optional
	Memory *string `json:"memory,omitempty" tf:"memory,omitempty"`
}

// Cluster_Node_PoolSpec defines the desired state of Cluster_Node_Pool
type Cluster_Node_PoolSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     Cluster_Node_PoolParameters `json:"forProvider"`
}

// Cluster_Node_PoolStatus defines the observed state of Cluster_Node_Pool.
type Cluster_Node_PoolStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        Cluster_Node_PoolObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Cluster_Node_Pool is the Schema for the Cluster_Node_Pools API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tmc}
type Cluster_Node_Pool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.clusterName)",message="clusterName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.managementClusterName)",message="managementClusterName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.provisionerName)",message="provisionerName is a required parameter"
	Spec   Cluster_Node_PoolSpec   `json:"spec"`
	Status Cluster_Node_PoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// Cluster_Node_PoolList contains a list of Cluster_Node_Pools
type Cluster_Node_PoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Cluster_Node_Pool `json:"items"`
}

// Repository type metadata.
var (
	Cluster_Node_Pool_Kind             = "Cluster_Node_Pool"
	Cluster_Node_Pool_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Cluster_Node_Pool_Kind}.String()
	Cluster_Node_Pool_KindAPIVersion   = Cluster_Node_Pool_Kind + "." + CRDGroupVersion.String()
	Cluster_Node_Pool_GroupVersionKind = CRDGroupVersion.WithKind(Cluster_Node_Pool_Kind)
)

func init() {
	SchemeBuilder.Register(&Cluster_Node_Pool{}, &Cluster_Node_PoolList{})
}
