/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LargeObservation struct {
}

type LargeParameters struct {
}

type MediumObservation struct {
}

type MediumParameters struct {
}

type NamespaceQuotaPolicyMetaObservation struct {

	// Annotations for the resource
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Description of the resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Labels for the resource
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Resource version of the resource
	ResourceVersion *string `json:"resourceVersion,omitempty" tf:"resource_version,omitempty"`

	// UID of the resource
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type NamespaceQuotaPolicyMetaParameters struct {

	// Annotations for the resource
	// +kubebuilder:validation:Optional
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Description of the resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Labels for the resource
	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`
}

type NamespaceQuotaPolicyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Metadata for the resource
	Meta []NamespaceQuotaPolicyMetaObservation `json:"meta,omitempty" tf:"meta,omitempty"`

	// Name of the namespace quota policy
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Scope for the custom, security, image, network, namespace quota and mutation policy, having one of the valid scopes for custom, security, mutation, and namespace quota policy: cluster, cluster_group or organization and valid scopes for image and network policy: workspace or organization.
	Scope []NamespaceQuotaPolicyScopeObservation `json:"scope,omitempty" tf:"scope,omitempty"`

	// Spec for the namespace namespace quota policy
	Spec []NamespaceQuotaPolicySpecObservation `json:"spec,omitempty" tf:"spec,omitempty"`
}

type NamespaceQuotaPolicyParameters struct {

	// Metadata for the resource
	// +kubebuilder:validation:Optional
	Meta []NamespaceQuotaPolicyMetaParameters `json:"meta,omitempty" tf:"meta,omitempty"`

	// Name of the namespace quota policy
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Scope for the custom, security, image, network, namespace quota and mutation policy, having one of the valid scopes for custom, security, mutation, and namespace quota policy: cluster, cluster_group or organization and valid scopes for image and network policy: workspace or organization.
	// +kubebuilder:validation:Optional
	Scope []NamespaceQuotaPolicyScopeParameters `json:"scope,omitempty" tf:"scope,omitempty"`

	// Spec for the namespace namespace quota policy
	// +kubebuilder:validation:Optional
	Spec []NamespaceQuotaPolicySpecParameters `json:"spec,omitempty" tf:"spec,omitempty"`
}

type NamespaceQuotaPolicyScopeClusterGroupObservation struct {

	// Name of this cluster group
	ClusterGroup *string `json:"clusterGroup,omitempty" tf:"cluster_group,omitempty"`
}

type NamespaceQuotaPolicyScopeClusterGroupParameters struct {

	// Name of this cluster group
	// +kubebuilder:validation:Required
	ClusterGroup *string `json:"clusterGroup" tf:"cluster_group,omitempty"`
}

type NamespaceQuotaPolicyScopeClusterObservation struct {

	// Name of the management cluster
	ManagementClusterName *string `json:"managementClusterName,omitempty" tf:"management_cluster_name,omitempty"`

	// Name of this cluster
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Provisioner of the cluster
	ProvisionerName *string `json:"provisionerName,omitempty" tf:"provisioner_name,omitempty"`
}

type NamespaceQuotaPolicyScopeClusterParameters struct {

	// Name of the management cluster
	// +kubebuilder:validation:Optional
	ManagementClusterName *string `json:"managementClusterName,omitempty" tf:"management_cluster_name,omitempty"`

	// Name of this cluster
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Provisioner of the cluster
	// +kubebuilder:validation:Optional
	ProvisionerName *string `json:"provisionerName,omitempty" tf:"provisioner_name,omitempty"`
}

type NamespaceQuotaPolicyScopeObservation struct {

	// The schema for cluster policy full name
	Cluster []NamespaceQuotaPolicyScopeClusterObservation `json:"cluster,omitempty" tf:"cluster,omitempty"`

	// The schema for cluster group policy full name
	ClusterGroup []NamespaceQuotaPolicyScopeClusterGroupObservation `json:"clusterGroup,omitempty" tf:"cluster_group,omitempty"`

	// The schema for organization policy full name
	Organization []NamespaceQuotaPolicyScopeOrganizationObservation `json:"organization,omitempty" tf:"organization,omitempty"`

	// The schema for workspace policy full name
	Workspace []NamespaceQuotaPolicyScopeWorkspaceObservation `json:"workspace,omitempty" tf:"workspace,omitempty"`
}

type NamespaceQuotaPolicyScopeOrganizationObservation struct {

	// ID of this organization
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`
}

type NamespaceQuotaPolicyScopeOrganizationParameters struct {

	// ID of this organization
	// +kubebuilder:validation:Required
	Organization *string `json:"organization" tf:"organization,omitempty"`
}

type NamespaceQuotaPolicyScopeParameters struct {

	// The schema for cluster policy full name
	// +kubebuilder:validation:Optional
	Cluster []NamespaceQuotaPolicyScopeClusterParameters `json:"cluster,omitempty" tf:"cluster,omitempty"`

	// The schema for cluster group policy full name
	// +kubebuilder:validation:Optional
	ClusterGroup []NamespaceQuotaPolicyScopeClusterGroupParameters `json:"clusterGroup,omitempty" tf:"cluster_group,omitempty"`

	// The schema for organization policy full name
	// +kubebuilder:validation:Optional
	Organization []NamespaceQuotaPolicyScopeOrganizationParameters `json:"organization,omitempty" tf:"organization,omitempty"`

	// The schema for workspace policy full name
	// +kubebuilder:validation:Optional
	Workspace []NamespaceQuotaPolicyScopeWorkspaceParameters `json:"workspace,omitempty" tf:"workspace,omitempty"`
}

type NamespaceQuotaPolicyScopeWorkspaceObservation struct {

	// Name of this workspace
	Workspace *string `json:"workspace,omitempty" tf:"workspace,omitempty"`
}

type NamespaceQuotaPolicyScopeWorkspaceParameters struct {

	// Name of this workspace
	// +kubebuilder:validation:Required
	Workspace *string `json:"workspace" tf:"workspace,omitempty"`
}

type NamespaceQuotaPolicySpecInputObservation struct {

	// The input schema for namespace quota policy custom recipe version v1
	Custom []SpecInputCustomObservation `json:"custom,omitempty" tf:"custom,omitempty"`

	// The input schema for namespace quota policy large recipe version v1
	Large []LargeParameters `json:"large,omitempty" tf:"large,omitempty"`

	// The input schema for namespace quota policy medium recipe version v1
	Medium []MediumParameters `json:"medium,omitempty" tf:"medium,omitempty"`

	// The input schema for namespace quota policy small recipe version v1
	Small []SmallParameters `json:"small,omitempty" tf:"small,omitempty"`
}

type NamespaceQuotaPolicySpecInputParameters struct {

	// The input schema for namespace quota policy custom recipe version v1
	// +kubebuilder:validation:Optional
	Custom []SpecInputCustomParameters `json:"custom,omitempty" tf:"custom,omitempty"`

	// The input schema for namespace quota policy large recipe version v1
	// +kubebuilder:validation:Optional
	Large []LargeParameters `json:"large,omitempty" tf:"large,omitempty"`

	// The input schema for namespace quota policy medium recipe version v1
	// +kubebuilder:validation:Optional
	Medium []MediumParameters `json:"medium,omitempty" tf:"medium,omitempty"`

	// The input schema for namespace quota policy small recipe version v1
	// +kubebuilder:validation:Optional
	Small []SmallParameters `json:"small,omitempty" tf:"small,omitempty"`
}

type NamespaceQuotaPolicySpecNamespaceSelectorObservation struct {

	// Match expressions is a list of label selector requirements, the requirements are ANDed
	MatchExpressions []SpecNamespaceSelectorMatchExpressionsObservation `json:"matchExpressions,omitempty" tf:"match_expressions,omitempty"`
}

type NamespaceQuotaPolicySpecNamespaceSelectorParameters struct {

	// Match expressions is a list of label selector requirements, the requirements are ANDed
	// +kubebuilder:validation:Required
	MatchExpressions []SpecNamespaceSelectorMatchExpressionsParameters `json:"matchExpressions" tf:"match_expressions,omitempty"`
}

type NamespaceQuotaPolicySpecObservation struct {

	// Input for the namespace quota policy, having one of the valid recipes: small, medium, large or custom.
	Input []NamespaceQuotaPolicySpecInputObservation `json:"input,omitempty" tf:"input,omitempty"`

	// Label based Namespace Selector for the policy
	NamespaceSelector []NamespaceQuotaPolicySpecNamespaceSelectorObservation `json:"namespaceSelector,omitempty" tf:"namespace_selector,omitempty"`
}

type NamespaceQuotaPolicySpecParameters struct {

	// Input for the namespace quota policy, having one of the valid recipes: small, medium, large or custom.
	// +kubebuilder:validation:Required
	Input []NamespaceQuotaPolicySpecInputParameters `json:"input" tf:"input,omitempty"`

	// Label based Namespace Selector for the policy
	// +kubebuilder:validation:Optional
	NamespaceSelector []NamespaceQuotaPolicySpecNamespaceSelectorParameters `json:"namespaceSelector,omitempty" tf:"namespace_selector,omitempty"`
}

type SmallObservation struct {
}

type SmallParameters struct {
}

type SpecInputCustomObservation struct {

	// The sum of CPU limits across all pods in a non-terminal state cannot exceed this value
	LimitsCPU *string `json:"limitsCpu,omitempty" tf:"limits_cpu,omitempty"`

	// The sum of memory limits across all pods in a non-terminal state cannot exceed this value
	LimitsMemory *string `json:"limitsMemory,omitempty" tf:"limits_memory,omitempty"`

	// The total number of PersistentVolumeClaims that can exist in a namespace
	PersistentVolumeClaims *float64 `json:"persistentVolumeClaims,omitempty" tf:"persistent_volume_claims,omitempty"`

	// Across all persistent volume claims associated with each storage class, the total number of persistent volume claims that can exist in the namespace
	PersistentVolumeClaimsPerClass map[string]*float64 `json:"persistentVolumeClaimsPerClass,omitempty" tf:"persistent_volume_claims_per_class,omitempty"`

	// The sum of CPU requests across all pods in a non-terminal state cannot exceed this value
	RequestsCPU *string `json:"requestsCpu,omitempty" tf:"requests_cpu,omitempty"`

	// The sum of memory requests across all pods in a non-terminal state cannot exceed this value
	RequestsMemory *string `json:"requestsMemory,omitempty" tf:"requests_memory,omitempty"`

	// The sum of storage requests across all persistent volume claims cannot exceed this value
	RequestsStorage *string `json:"requestsStorage,omitempty" tf:"requests_storage,omitempty"`

	// Across all persistent volume claims associated with each storage class, the sum of storage requests cannot exceed this value
	RequestsStoragePerClass map[string]*string `json:"requestsStoragePerClass,omitempty" tf:"requests_storage_per_class,omitempty"`

	// The total number of Services of the given type that can exist in a namespace
	ResourceCounts map[string]*float64 `json:"resourceCounts,omitempty" tf:"resource_counts,omitempty"`
}

type SpecInputCustomParameters struct {

	// The sum of CPU limits across all pods in a non-terminal state cannot exceed this value
	// +kubebuilder:validation:Optional
	LimitsCPU *string `json:"limitsCpu,omitempty" tf:"limits_cpu,omitempty"`

	// The sum of memory limits across all pods in a non-terminal state cannot exceed this value
	// +kubebuilder:validation:Optional
	LimitsMemory *string `json:"limitsMemory,omitempty" tf:"limits_memory,omitempty"`

	// The total number of PersistentVolumeClaims that can exist in a namespace
	// +kubebuilder:validation:Optional
	PersistentVolumeClaims *float64 `json:"persistentVolumeClaims,omitempty" tf:"persistent_volume_claims,omitempty"`

	// Across all persistent volume claims associated with each storage class, the total number of persistent volume claims that can exist in the namespace
	// +kubebuilder:validation:Optional
	PersistentVolumeClaimsPerClass map[string]*float64 `json:"persistentVolumeClaimsPerClass,omitempty" tf:"persistent_volume_claims_per_class,omitempty"`

	// The sum of CPU requests across all pods in a non-terminal state cannot exceed this value
	// +kubebuilder:validation:Optional
	RequestsCPU *string `json:"requestsCpu,omitempty" tf:"requests_cpu,omitempty"`

	// The sum of memory requests across all pods in a non-terminal state cannot exceed this value
	// +kubebuilder:validation:Optional
	RequestsMemory *string `json:"requestsMemory,omitempty" tf:"requests_memory,omitempty"`

	// The sum of storage requests across all persistent volume claims cannot exceed this value
	// +kubebuilder:validation:Optional
	RequestsStorage *string `json:"requestsStorage,omitempty" tf:"requests_storage,omitempty"`

	// Across all persistent volume claims associated with each storage class, the sum of storage requests cannot exceed this value
	// +kubebuilder:validation:Optional
	RequestsStoragePerClass map[string]*string `json:"requestsStoragePerClass,omitempty" tf:"requests_storage_per_class,omitempty"`

	// The total number of Services of the given type that can exist in a namespace
	// +kubebuilder:validation:Optional
	ResourceCounts map[string]*float64 `json:"resourceCounts,omitempty" tf:"resource_counts,omitempty"`
}

type SpecNamespaceSelectorMatchExpressionsObservation struct {

	// Key is the label key that the selector applies to
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Operator represents a key's relationship to a set of values
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// Values is an array of string values
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type SpecNamespaceSelectorMatchExpressionsParameters struct {

	// Key is the label key that the selector applies to
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Operator represents a key's relationship to a set of values
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// Values is an array of string values
	// +kubebuilder:validation:Required
	Values []*string `json:"values" tf:"values,omitempty"`
}

// NamespaceQuotaPolicySpec defines the desired state of NamespaceQuotaPolicy
type NamespaceQuotaPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NamespaceQuotaPolicyParameters `json:"forProvider"`
}

// NamespaceQuotaPolicyStatus defines the observed state of NamespaceQuotaPolicy.
type NamespaceQuotaPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NamespaceQuotaPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NamespaceQuotaPolicy is the Schema for the NamespaceQuotaPolicys API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tmc}
type NamespaceQuotaPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.scope)",message="scope is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.spec)",message="spec is a required parameter"
	Spec   NamespaceQuotaPolicySpec   `json:"spec"`
	Status NamespaceQuotaPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NamespaceQuotaPolicyList contains a list of NamespaceQuotaPolicys
type NamespaceQuotaPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NamespaceQuotaPolicy `json:"items"`
}

// Repository type metadata.
var (
	NamespaceQuotaPolicy_Kind             = "NamespaceQuotaPolicy"
	NamespaceQuotaPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NamespaceQuotaPolicy_Kind}.String()
	NamespaceQuotaPolicy_KindAPIVersion   = NamespaceQuotaPolicy_Kind + "." + CRDGroupVersion.String()
	NamespaceQuotaPolicy_GroupVersionKind = CRDGroupVersion.WithKind(NamespaceQuotaPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&NamespaceQuotaPolicy{}, &NamespaceQuotaPolicyList{})
}
