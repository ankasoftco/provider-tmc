/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AllowAllEgressObservation struct {
}

type AllowAllEgressParameters struct {
}

type AllowAllObservation struct {

	// Allow traffic only from own namespace. Allow traffic only from pods in the same namespace as the destination pod.
	FromOwnNamespace *bool `json:"fromOwnNamespace,omitempty" tf:"from_own_namespace,omitempty"`
}

type AllowAllParameters struct {

	// Allow traffic only from own namespace. Allow traffic only from pods in the same namespace as the destination pod.
	// +kubebuilder:validation:Optional
	FromOwnNamespace *bool `json:"fromOwnNamespace,omitempty" tf:"from_own_namespace,omitempty"`
}

type AllowAllToPodsObservation struct {

	// Allow traffic only from own namespace. Allow traffic only from pods in the same namespace as the destination pod.
	FromOwnNamespace *bool `json:"fromOwnNamespace,omitempty" tf:"from_own_namespace,omitempty"`

	// Pod Labels on which traffic should be allowed/denied. Use a label selector to identify the pods to which the policy applies.
	ToPodLabels map[string]*string `json:"toPodLabels,omitempty" tf:"to_pod_labels,omitempty"`
}

type AllowAllToPodsParameters struct {

	// Allow traffic only from own namespace. Allow traffic only from pods in the same namespace as the destination pod.
	// +kubebuilder:validation:Optional
	FromOwnNamespace *bool `json:"fromOwnNamespace,omitempty" tf:"from_own_namespace,omitempty"`

	// Pod Labels on which traffic should be allowed/denied. Use a label selector to identify the pods to which the policy applies.
	// +kubebuilder:validation:Optional
	ToPodLabels map[string]*string `json:"toPodLabels,omitempty" tf:"to_pod_labels,omitempty"`
}

type CustomEgressObservation struct {

	// This specifies list of egress rules to be applied to the selected pods.
	Rules []CustomEgressRulesObservation `json:"rules,omitempty" tf:"rules,omitempty"`

	// Pod Labels on which traffic should be allowed/denied. Use a label selector to identify the pods to which the policy applies.
	ToPodLabels map[string]*string `json:"toPodLabels,omitempty" tf:"to_pod_labels,omitempty"`
}

type CustomEgressParameters struct {

	// This specifies list of egress rules to be applied to the selected pods.
	// +kubebuilder:validation:Required
	Rules []CustomEgressRulesParameters `json:"rules" tf:"rules,omitempty"`

	// Pod Labels on which traffic should be allowed/denied. Use a label selector to identify the pods to which the policy applies.
	// +kubebuilder:validation:Optional
	ToPodLabels map[string]*string `json:"toPodLabels,omitempty" tf:"to_pod_labels,omitempty"`
}

type CustomEgressRulesObservation struct {

	// List of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. Default is this rule matches all ports (traffic not restricted by port).
	Ports []PortsObservation `json:"ports,omitempty" tf:"ports,omitempty"`

	// List of destinations for outgoing traffic of pods selected for this rule. Default is the rule matches all destinations (traffic not restricted by destinations).
	RuleSpec []RuleSpecObservation `json:"ruleSpec,omitempty" tf:"rule_spec,omitempty"`
}

type CustomEgressRulesParameters struct {

	// List of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. Default is this rule matches all ports (traffic not restricted by port).
	// +kubebuilder:validation:Required
	Ports []PortsParameters `json:"ports" tf:"ports,omitempty"`

	// List of destinations for outgoing traffic of pods selected for this rule. Default is the rule matches all destinations (traffic not restricted by destinations).
	// +kubebuilder:validation:Required
	RuleSpec []RuleSpecParameters `json:"ruleSpec" tf:"rule_spec,omitempty"`
}

type CustomIPIPBlockObservation struct {

	// CIDR is a string representing the IP Block Valid examples are "192.168.1.1/24" or "2001:db9::/64"
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// Except is a slice of CIDRs that should not be included within an IP Block Valid examples are "192.168.1.1/24" or "2001:db9::/64" Except values will be rejected if they are outside the CIDR range
	Except []*string `json:"except,omitempty" tf:"except,omitempty"`
}

type CustomIPIPBlockParameters struct {

	// CIDR is a string representing the IP Block Valid examples are "192.168.1.1/24" or "2001:db9::/64"
	// +kubebuilder:validation:Required
	Cidr *string `json:"cidr" tf:"cidr,omitempty"`

	// Except is a slice of CIDRs that should not be included within an IP Block Valid examples are "192.168.1.1/24" or "2001:db9::/64" Except values will be rejected if they are outside the CIDR range
	// +kubebuilder:validation:Optional
	Except []*string `json:"except,omitempty" tf:"except,omitempty"`
}

type CustomIPObservation struct {

	// IPBlock defines policy on a particular IPBlock. If this field is set then neither of the namespaceSelector and PodSelector can be set.
	IPBlock []IPBlockObservation `json:"ipBlock,omitempty" tf:"ip_block,omitempty"`
}

type CustomIPParameters struct {

	// IPBlock defines policy on a particular IPBlock. If this field is set then neither of the namespaceSelector and PodSelector can be set.
	// +kubebuilder:validation:Optional
	IPBlock []IPBlockParameters `json:"ipBlock,omitempty" tf:"ip_block,omitempty"`
}

type CustomIngressObservation struct {

	// This specifies list of ingress rules to be applied to the selected pods.
	Rules []CustomIngressRulesObservation `json:"rules,omitempty" tf:"rules,omitempty"`

	// Pod Labels on which traffic should be allowed/denied. Use a label selector to identify the pods to which the policy applies.
	ToPodLabels map[string]*string `json:"toPodLabels,omitempty" tf:"to_pod_labels,omitempty"`
}

type CustomIngressParameters struct {

	// This specifies list of ingress rules to be applied to the selected pods.
	// +kubebuilder:validation:Required
	Rules []CustomIngressRulesParameters `json:"rules" tf:"rules,omitempty"`

	// Pod Labels on which traffic should be allowed/denied. Use a label selector to identify the pods to which the policy applies.
	// +kubebuilder:validation:Optional
	ToPodLabels map[string]*string `json:"toPodLabels,omitempty" tf:"to_pod_labels,omitempty"`
}

type CustomIngressRulesObservation struct {

	// List of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. Default is this rule matches all ports (traffic not restricted by port).
	Ports []RulesPortsObservation `json:"ports,omitempty" tf:"ports,omitempty"`

	// List of sources which should be able to access the pods selected for this rule. Default is the rule matches all sources (traffic not restricted by source). List of items of type V1alpha1CommonPolicySpecNetworkV1CustomIngressRulesRuleSpec0 OR V1alpha1CommonPolicySpecNetworkV1CustomIngressRulesRuleSpec1.
	RuleSpec []RulesRuleSpecObservation `json:"ruleSpec,omitempty" tf:"rule_spec,omitempty"`
}

type CustomIngressRulesParameters struct {

	// List of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. Default is this rule matches all ports (traffic not restricted by port).
	// +kubebuilder:validation:Required
	Ports []RulesPortsParameters `json:"ports" tf:"ports,omitempty"`

	// List of sources which should be able to access the pods selected for this rule. Default is the rule matches all sources (traffic not restricted by source). List of items of type V1alpha1CommonPolicySpecNetworkV1CustomIngressRulesRuleSpec0 OR V1alpha1CommonPolicySpecNetworkV1CustomIngressRulesRuleSpec1.
	// +kubebuilder:validation:Required
	RuleSpec []RulesRuleSpecParameters `json:"ruleSpec" tf:"rule_spec,omitempty"`
}

type CustomSelectorObservation struct {

	// Use a label selector to identify the namespaces to allow as egress destinations.
	NamespaceSelector map[string]*string `json:"namespaceSelector,omitempty" tf:"namespace_selector,omitempty"`

	// Use a label selector to identify the pods to allow as egress destinations.
	PodSelector map[string]*string `json:"podSelector,omitempty" tf:"pod_selector,omitempty"`
}

type CustomSelectorParameters struct {

	// Use a label selector to identify the namespaces to allow as egress destinations.
	// +kubebuilder:validation:Optional
	NamespaceSelector map[string]*string `json:"namespaceSelector,omitempty" tf:"namespace_selector,omitempty"`

	// Use a label selector to identify the pods to allow as egress destinations.
	// +kubebuilder:validation:Optional
	PodSelector map[string]*string `json:"podSelector,omitempty" tf:"pod_selector,omitempty"`
}

type DenyAllEgressObservation struct {
}

type DenyAllEgressParameters struct {
}

type DenyAllObservation struct {
}

type DenyAllParameters struct {
}

type DenyAllToPodsObservation struct {

	// Pod Labels on which traffic should be allowed/denied. Use a label selector to identify the pods to which the policy applies.
	ToPodLabels map[string]*string `json:"toPodLabels,omitempty" tf:"to_pod_labels,omitempty"`
}

type DenyAllToPodsParameters struct {

	// Pod Labels on which traffic should be allowed/denied. Use a label selector to identify the pods to which the policy applies.
	// +kubebuilder:validation:Optional
	ToPodLabels map[string]*string `json:"toPodLabels,omitempty" tf:"to_pod_labels,omitempty"`
}

type IPBlockObservation struct {

	// CIDR is a string representing the IP Block Valid examples are "192.168.1.1/24" or "2001:db9::/64"
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// Except is a slice of CIDRs that should not be included within an IP Block Valid examples are "192.168.1.1/24" or "2001:db9::/64" Except values will be rejected if they are outside the CIDR range
	Except []*string `json:"except,omitempty" tf:"except,omitempty"`
}

type IPBlockParameters struct {

	// CIDR is a string representing the IP Block Valid examples are "192.168.1.1/24" or "2001:db9::/64"
	// +kubebuilder:validation:Required
	Cidr *string `json:"cidr" tf:"cidr,omitempty"`

	// Except is a slice of CIDRs that should not be included within an IP Block Valid examples are "192.168.1.1/24" or "2001:db9::/64" Except values will be rejected if they are outside the CIDR range
	// +kubebuilder:validation:Optional
	Except []*string `json:"except,omitempty" tf:"except,omitempty"`
}

type NetworkPolicyMetaObservation struct {

	// Annotations for the resource
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Description of the resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Labels for the resource
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Resource version of the resource
	ResourceVersion *string `json:"resourceVersion,omitempty" tf:"resource_version,omitempty"`

	// UID of the resource
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type NetworkPolicyMetaParameters struct {

	// Annotations for the resource
	// +kubebuilder:validation:Optional
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Description of the resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Labels for the resource
	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`
}

type NetworkPolicyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Metadata for the resource
	Meta []NetworkPolicyMetaObservation `json:"meta,omitempty" tf:"meta,omitempty"`

	// Name of the network policy
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Scope for the custom, security, image, network and namespace quota policy, having one of the valid scopes for custom, security and namespace quota policy: cluster, cluster_group or organization and valid scopes for image and network policy: workspace or organization.
	Scope []NetworkPolicyScopeObservation `json:"scope,omitempty" tf:"scope,omitempty"`

	// Spec for the network policy
	Spec []NetworkPolicySpecObservation `json:"spec,omitempty" tf:"spec,omitempty"`
}

type NetworkPolicyParameters struct {

	// Metadata for the resource
	// +kubebuilder:validation:Optional
	Meta []NetworkPolicyMetaParameters `json:"meta,omitempty" tf:"meta,omitempty"`

	// Name of the network policy
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Scope for the custom, security, image, network and namespace quota policy, having one of the valid scopes for custom, security and namespace quota policy: cluster, cluster_group or organization and valid scopes for image and network policy: workspace or organization.
	// +kubebuilder:validation:Optional
	Scope []NetworkPolicyScopeParameters `json:"scope,omitempty" tf:"scope,omitempty"`

	// Spec for the network policy
	// +kubebuilder:validation:Optional
	Spec []NetworkPolicySpecParameters `json:"spec,omitempty" tf:"spec,omitempty"`
}

type NetworkPolicyScopeClusterGroupObservation struct {

	// Name of this cluster group
	ClusterGroup *string `json:"clusterGroup,omitempty" tf:"cluster_group,omitempty"`
}

type NetworkPolicyScopeClusterGroupParameters struct {

	// Name of this cluster group
	// +kubebuilder:validation:Required
	ClusterGroup *string `json:"clusterGroup" tf:"cluster_group,omitempty"`
}

type NetworkPolicyScopeClusterObservation struct {

	// Name of the management cluster
	ManagementClusterName *string `json:"managementClusterName,omitempty" tf:"management_cluster_name,omitempty"`

	// Name of this cluster
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Provisioner of the cluster
	ProvisionerName *string `json:"provisionerName,omitempty" tf:"provisioner_name,omitempty"`
}

type NetworkPolicyScopeClusterParameters struct {

	// Name of the management cluster
	// +kubebuilder:validation:Optional
	ManagementClusterName *string `json:"managementClusterName,omitempty" tf:"management_cluster_name,omitempty"`

	// Name of this cluster
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Provisioner of the cluster
	// +kubebuilder:validation:Optional
	ProvisionerName *string `json:"provisionerName,omitempty" tf:"provisioner_name,omitempty"`
}

type NetworkPolicyScopeObservation struct {

	// The schema for cluster policy full name
	Cluster []NetworkPolicyScopeClusterObservation `json:"cluster,omitempty" tf:"cluster,omitempty"`

	// The schema for cluster group policy full name
	ClusterGroup []NetworkPolicyScopeClusterGroupObservation `json:"clusterGroup,omitempty" tf:"cluster_group,omitempty"`

	// The schema for organization policy full name
	Organization []NetworkPolicyScopeOrganizationObservation `json:"organization,omitempty" tf:"organization,omitempty"`

	// The schema for workspace policy full name
	Workspace []NetworkPolicyScopeWorkspaceObservation `json:"workspace,omitempty" tf:"workspace,omitempty"`
}

type NetworkPolicyScopeOrganizationObservation struct {

	// ID of this organization
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`
}

type NetworkPolicyScopeOrganizationParameters struct {

	// ID of this organization
	// +kubebuilder:validation:Required
	Organization *string `json:"organization" tf:"organization,omitempty"`
}

type NetworkPolicyScopeParameters struct {

	// The schema for cluster policy full name
	// +kubebuilder:validation:Optional
	Cluster []NetworkPolicyScopeClusterParameters `json:"cluster,omitempty" tf:"cluster,omitempty"`

	// The schema for cluster group policy full name
	// +kubebuilder:validation:Optional
	ClusterGroup []NetworkPolicyScopeClusterGroupParameters `json:"clusterGroup,omitempty" tf:"cluster_group,omitempty"`

	// The schema for organization policy full name
	// +kubebuilder:validation:Optional
	Organization []NetworkPolicyScopeOrganizationParameters `json:"organization,omitempty" tf:"organization,omitempty"`

	// The schema for workspace policy full name
	// +kubebuilder:validation:Optional
	Workspace []NetworkPolicyScopeWorkspaceParameters `json:"workspace,omitempty" tf:"workspace,omitempty"`
}

type NetworkPolicyScopeWorkspaceObservation struct {

	// Name of this workspace
	Workspace *string `json:"workspace,omitempty" tf:"workspace,omitempty"`
}

type NetworkPolicyScopeWorkspaceParameters struct {

	// Name of this workspace
	// +kubebuilder:validation:Required
	Workspace *string `json:"workspace" tf:"workspace,omitempty"`
}

type NetworkPolicySpecInputObservation struct {

	// The input schema for network policy allow-all recipe version v1
	AllowAll []AllowAllObservation `json:"allowAll,omitempty" tf:"allow_all,omitempty"`

	// The input schema for network policy allow-all-egress recipe version v1
	AllowAllEgress []AllowAllEgressParameters `json:"allowAllEgress,omitempty" tf:"allow_all_egress,omitempty"`

	// The input schema for network policy allow-all-to-pods recipe version v1
	AllowAllToPods []AllowAllToPodsObservation `json:"allowAllToPods,omitempty" tf:"allow_all_to_pods,omitempty"`

	// The input schema for network policy custom egress recipe version v1
	CustomEgress []CustomEgressObservation `json:"customEgress,omitempty" tf:"custom_egress,omitempty"`

	// The input schema for network policy custom ingress recipe version v1
	CustomIngress []CustomIngressObservation `json:"customIngress,omitempty" tf:"custom_ingress,omitempty"`

	// The input schema for network policy deny-all recipe version v1
	DenyAll []DenyAllParameters `json:"denyAll,omitempty" tf:"deny_all,omitempty"`

	// The input schema for network policy deny-all-egress recipe version v1
	DenyAllEgress []DenyAllEgressParameters `json:"denyAllEgress,omitempty" tf:"deny_all_egress,omitempty"`

	// The input schema for network policy deny-all-to-pods recipe version v1
	DenyAllToPods []DenyAllToPodsObservation `json:"denyAllToPods,omitempty" tf:"deny_all_to_pods,omitempty"`
}

type NetworkPolicySpecInputParameters struct {

	// The input schema for network policy allow-all recipe version v1
	// +kubebuilder:validation:Optional
	AllowAll []AllowAllParameters `json:"allowAll,omitempty" tf:"allow_all,omitempty"`

	// The input schema for network policy allow-all-egress recipe version v1
	// +kubebuilder:validation:Optional
	AllowAllEgress []AllowAllEgressParameters `json:"allowAllEgress,omitempty" tf:"allow_all_egress,omitempty"`

	// The input schema for network policy allow-all-to-pods recipe version v1
	// +kubebuilder:validation:Optional
	AllowAllToPods []AllowAllToPodsParameters `json:"allowAllToPods,omitempty" tf:"allow_all_to_pods,omitempty"`

	// The input schema for network policy custom egress recipe version v1
	// +kubebuilder:validation:Optional
	CustomEgress []CustomEgressParameters `json:"customEgress,omitempty" tf:"custom_egress,omitempty"`

	// The input schema for network policy custom ingress recipe version v1
	// +kubebuilder:validation:Optional
	CustomIngress []CustomIngressParameters `json:"customIngress,omitempty" tf:"custom_ingress,omitempty"`

	// The input schema for network policy deny-all recipe version v1
	// +kubebuilder:validation:Optional
	DenyAll []DenyAllParameters `json:"denyAll,omitempty" tf:"deny_all,omitempty"`

	// The input schema for network policy deny-all-egress recipe version v1
	// +kubebuilder:validation:Optional
	DenyAllEgress []DenyAllEgressParameters `json:"denyAllEgress,omitempty" tf:"deny_all_egress,omitempty"`

	// The input schema for network policy deny-all-to-pods recipe version v1
	// +kubebuilder:validation:Optional
	DenyAllToPods []DenyAllToPodsParameters `json:"denyAllToPods,omitempty" tf:"deny_all_to_pods,omitempty"`
}

type NetworkPolicySpecNamespaceSelectorMatchExpressionsObservation struct {

	// Key is the label key that the selector applies to
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Operator represents a key's relationship to a set of values
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// Values is an array of string values
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type NetworkPolicySpecNamespaceSelectorMatchExpressionsParameters struct {

	// Key is the label key that the selector applies to
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Operator represents a key's relationship to a set of values
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// Values is an array of string values
	// +kubebuilder:validation:Required
	Values []*string `json:"values" tf:"values,omitempty"`
}

type NetworkPolicySpecNamespaceSelectorObservation struct {

	// Match expressions is a list of label selector requirements, the requirements are ANDed
	MatchExpressions []NetworkPolicySpecNamespaceSelectorMatchExpressionsObservation `json:"matchExpressions,omitempty" tf:"match_expressions,omitempty"`
}

type NetworkPolicySpecNamespaceSelectorParameters struct {

	// Match expressions is a list of label selector requirements, the requirements are ANDed
	// +kubebuilder:validation:Required
	MatchExpressions []NetworkPolicySpecNamespaceSelectorMatchExpressionsParameters `json:"matchExpressions" tf:"match_expressions,omitempty"`
}

type NetworkPolicySpecObservation struct {

	// Input for the network policy, having one of the valid recipes: allow-all, allow-all-to-pods, allow-all-egress, deny-all, deny-all-to-pods, deny-all-egress, custom-egress or custom-ingress.
	Input []NetworkPolicySpecInputObservation `json:"input,omitempty" tf:"input,omitempty"`

	// Label based Namespace Selector for the policy
	NamespaceSelector []NetworkPolicySpecNamespaceSelectorObservation `json:"namespaceSelector,omitempty" tf:"namespace_selector,omitempty"`
}

type NetworkPolicySpecParameters struct {

	// Input for the network policy, having one of the valid recipes: allow-all, allow-all-to-pods, allow-all-egress, deny-all, deny-all-to-pods, deny-all-egress, custom-egress or custom-ingress.
	// +kubebuilder:validation:Required
	Input []NetworkPolicySpecInputParameters `json:"input" tf:"input,omitempty"`

	// Label based Namespace Selector for the policy
	// +kubebuilder:validation:Optional
	NamespaceSelector []NetworkPolicySpecNamespaceSelectorParameters `json:"namespaceSelector,omitempty" tf:"namespace_selector,omitempty"`
}

type PortsObservation struct {

	// The port on the given protocol. This can either be a numerical or named port on a pod.
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	// The protocol (TCP or UDP) which traffic must match.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`
}

type PortsParameters struct {

	// The port on the given protocol. This can either be a numerical or named port on a pod.
	// +kubebuilder:validation:Optional
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	// The protocol (TCP or UDP) which traffic must match.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`
}

type RuleSpecCustomIPObservation struct {

	// IPBlock defines policy on a particular IPBlock. If this field is set then neither of the namespaceSelector and PodSelector can be set.
	IPBlock []CustomIPIPBlockObservation `json:"ipBlock,omitempty" tf:"ip_block,omitempty"`
}

type RuleSpecCustomIPParameters struct {

	// IPBlock defines policy on a particular IPBlock. If this field is set then neither of the namespaceSelector and PodSelector can be set.
	// +kubebuilder:validation:Optional
	IPBlock []CustomIPIPBlockParameters `json:"ipBlock,omitempty" tf:"ip_block,omitempty"`
}

type RuleSpecCustomSelectorObservation struct {

	// Use a label selector to identify the namespaces to allow as egress destinations.
	NamespaceSelector map[string]*string `json:"namespaceSelector,omitempty" tf:"namespace_selector,omitempty"`

	// Use a label selector to identify the pods to allow as egress destinations.
	PodSelector map[string]*string `json:"podSelector,omitempty" tf:"pod_selector,omitempty"`
}

type RuleSpecCustomSelectorParameters struct {

	// Use a label selector to identify the namespaces to allow as egress destinations.
	// +kubebuilder:validation:Optional
	NamespaceSelector map[string]*string `json:"namespaceSelector,omitempty" tf:"namespace_selector,omitempty"`

	// Use a label selector to identify the pods to allow as egress destinations.
	// +kubebuilder:validation:Optional
	PodSelector map[string]*string `json:"podSelector,omitempty" tf:"pod_selector,omitempty"`
}

type RuleSpecObservation struct {

	// The rule Spec (destination) for IP Block.
	CustomIP []CustomIPObservation `json:"customIp,omitempty" tf:"custom_ip,omitempty"`

	// The rule Spec (destination) for Selectors.
	CustomSelector []CustomSelectorObservation `json:"customSelector,omitempty" tf:"custom_selector,omitempty"`
}

type RuleSpecParameters struct {

	// The rule Spec (destination) for IP Block.
	// +kubebuilder:validation:Optional
	CustomIP []CustomIPParameters `json:"customIp,omitempty" tf:"custom_ip,omitempty"`

	// The rule Spec (destination) for Selectors.
	// +kubebuilder:validation:Optional
	CustomSelector []CustomSelectorParameters `json:"customSelector,omitempty" tf:"custom_selector,omitempty"`
}

type RulesPortsObservation struct {

	// The port on the given protocol. This can either be a numerical or named port on a pod.
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	// The protocol (TCP or UDP) which traffic must match.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`
}

type RulesPortsParameters struct {

	// The port on the given protocol. This can either be a numerical or named port on a pod.
	// +kubebuilder:validation:Optional
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	// The protocol (TCP or UDP) which traffic must match.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`
}

type RulesRuleSpecObservation struct {

	// The rule Spec (source) for IP Block.
	CustomIP []RuleSpecCustomIPObservation `json:"customIp,omitempty" tf:"custom_ip,omitempty"`

	// The rule Spec (source) for Selectors.
	CustomSelector []RuleSpecCustomSelectorObservation `json:"customSelector,omitempty" tf:"custom_selector,omitempty"`
}

type RulesRuleSpecParameters struct {

	// The rule Spec (source) for IP Block.
	// +kubebuilder:validation:Optional
	CustomIP []RuleSpecCustomIPParameters `json:"customIp,omitempty" tf:"custom_ip,omitempty"`

	// The rule Spec (source) for Selectors.
	// +kubebuilder:validation:Optional
	CustomSelector []RuleSpecCustomSelectorParameters `json:"customSelector,omitempty" tf:"custom_selector,omitempty"`
}

// NetworkPolicySpec defines the desired state of NetworkPolicy
type NetworkPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NetworkPolicyParameters `json:"forProvider"`
}

// NetworkPolicyStatus defines the observed state of NetworkPolicy.
type NetworkPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NetworkPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkPolicy is the Schema for the NetworkPolicys API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tmc}
type NetworkPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.scope)",message="scope is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.spec)",message="spec is a required parameter"
	Spec   NetworkPolicySpec   `json:"spec"`
	Status NetworkPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkPolicyList contains a list of NetworkPolicys
type NetworkPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetworkPolicy `json:"items"`
}

// Repository type metadata.
var (
	NetworkPolicy_Kind             = "NetworkPolicy"
	NetworkPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NetworkPolicy_Kind}.String()
	NetworkPolicy_KindAPIVersion   = NetworkPolicy_Kind + "." + CRDGroupVersion.String()
	NetworkPolicy_GroupVersionKind = CRDGroupVersion.WithKind(NetworkPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&NetworkPolicy{}, &NetworkPolicyList{})
}
