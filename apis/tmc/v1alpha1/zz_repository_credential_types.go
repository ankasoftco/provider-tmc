/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type Repository_CredentialMetaObservation struct {

	// Annotations for the resource
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Description of the resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Labels for the resource
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Resource version of the resource
	ResourceVersion *string `json:"resourceVersion,omitempty" tf:"resource_version,omitempty"`

	// UID of the resource
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type Repository_CredentialMetaParameters struct {

	// Annotations for the resource
	// +kubebuilder:validation:Optional
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Description of the resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Labels for the resource
	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`
}

type Repository_CredentialObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Metadata for the resource
	Meta []Repository_CredentialMetaObservation `json:"meta,omitempty" tf:"meta,omitempty"`

	// Name of the source secret.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// ID of Organization.
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// Scope for the source secret, having one of the valid scopes: cluster, cluster_group.
	Scope []Repository_CredentialScopeObservation `json:"scope,omitempty" tf:"scope,omitempty"`

	// Spec for source secret.
	Spec []Repository_CredentialSpecObservation `json:"spec,omitempty" tf:"spec,omitempty"`
}

type Repository_CredentialParameters struct {

	// Metadata for the resource
	// +kubebuilder:validation:Optional
	Meta []Repository_CredentialMetaParameters `json:"meta,omitempty" tf:"meta,omitempty"`

	// Name of the source secret.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// ID of Organization.
	// +kubebuilder:validation:Optional
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// Scope for the source secret, having one of the valid scopes: cluster, cluster_group.
	// +kubebuilder:validation:Optional
	Scope []Repository_CredentialScopeParameters `json:"scope,omitempty" tf:"scope,omitempty"`

	// Spec for source secret.
	// +kubebuilder:validation:Optional
	Spec []Repository_CredentialSpecParameters `json:"spec,omitempty" tf:"spec,omitempty"`
}

type Repository_CredentialScopeClusterGroupObservation struct {

	// Name of the cluster group
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type Repository_CredentialScopeClusterGroupParameters struct {

	// Name of the cluster group
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

type Repository_CredentialScopeClusterObservation struct {

	// Name of the management cluster
	ManagementClusterName *string `json:"managementClusterName,omitempty" tf:"management_cluster_name,omitempty"`

	// Name of this cluster
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Provisioner of the cluster
	ProvisionerName *string `json:"provisionerName,omitempty" tf:"provisioner_name,omitempty"`
}

type Repository_CredentialScopeClusterParameters struct {

	// Name of the management cluster
	// +kubebuilder:validation:Optional
	ManagementClusterName *string `json:"managementClusterName,omitempty" tf:"management_cluster_name,omitempty"`

	// Name of this cluster
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Provisioner of the cluster
	// +kubebuilder:validation:Optional
	ProvisionerName *string `json:"provisionerName,omitempty" tf:"provisioner_name,omitempty"`
}

type Repository_CredentialScopeObservation struct {

	// The schema for cluster full name
	Cluster []Repository_CredentialScopeClusterObservation `json:"cluster,omitempty" tf:"cluster,omitempty"`

	// The schema for cluster group full name
	ClusterGroup []Repository_CredentialScopeClusterGroupObservation `json:"clusterGroup,omitempty" tf:"cluster_group,omitempty"`
}

type Repository_CredentialScopeParameters struct {

	// The schema for cluster full name
	// +kubebuilder:validation:Optional
	Cluster []Repository_CredentialScopeClusterParameters `json:"cluster,omitempty" tf:"cluster,omitempty"`

	// The schema for cluster group full name
	// +kubebuilder:validation:Optional
	ClusterGroup []Repository_CredentialScopeClusterGroupParameters `json:"clusterGroup,omitempty" tf:"cluster_group,omitempty"`
}

type Repository_CredentialSpecObservation struct {

	// The schema for spec credential type.
	Data []SpecDataObservation `json:"data,omitempty" tf:"data,omitempty"`
}

type Repository_CredentialSpecParameters struct {

	// The schema for spec credential type.
	// +kubebuilder:validation:Required
	Data []SpecDataParameters `json:"data" tf:"data,omitempty"`
}

type SSHKeyObservation struct {

	// Known Hosts file path.
	KnownHosts *string `json:"knownHosts,omitempty" tf:"known_hosts,omitempty"`
}

type SSHKeyParameters struct {

	// SSH Identity file.
	// +kubebuilder:validation:Required
	IdentitySecretRef v1.SecretKeySelector `json:"identitySecretRef" tf:"-"`

	// Known Hosts file path.
	// +kubebuilder:validation:Required
	KnownHosts *string `json:"knownHosts" tf:"known_hosts,omitempty"`
}

type SpecDataObservation struct {

	// The schema for SSH credential type spec.
	SSHKey []SSHKeyObservation `json:"sshKey,omitempty" tf:"ssh_key,omitempty"`

	// The schema for Username/Password credential type spec.
	UsernamePassword []UsernamePasswordObservation `json:"usernamePassword,omitempty" tf:"username_password,omitempty"`
}

type SpecDataParameters struct {

	// The schema for SSH credential type spec.
	// +kubebuilder:validation:Optional
	SSHKey []SSHKeyParameters `json:"sshKey,omitempty" tf:"ssh_key,omitempty"`

	// The schema for Username/Password credential type spec.
	// +kubebuilder:validation:Optional
	UsernamePassword []UsernamePasswordParameters `json:"usernamePassword,omitempty" tf:"username_password,omitempty"`
}

type UsernamePasswordObservation struct {

	// Username for the basic authorization.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type UsernamePasswordParameters struct {

	// Password for the basic authorization.
	// +kubebuilder:validation:Required
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// Username for the basic authorization.
	// +kubebuilder:validation:Required
	Username *string `json:"username" tf:"username,omitempty"`
}

// Repository_CredentialSpec defines the desired state of Repository_Credential
type Repository_CredentialSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     Repository_CredentialParameters `json:"forProvider"`
}

// Repository_CredentialStatus defines the observed state of Repository_Credential.
type Repository_CredentialStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        Repository_CredentialObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Repository_Credential is the Schema for the Repository_Credentials API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tmc}
type Repository_Credential struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.scope)",message="scope is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.spec)",message="spec is a required parameter"
	Spec   Repository_CredentialSpec   `json:"spec"`
	Status Repository_CredentialStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// Repository_CredentialList contains a list of Repository_Credentials
type Repository_CredentialList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Repository_Credential `json:"items"`
}

// Repository type metadata.
var (
	Repository_Credential_Kind             = "Repository_Credential"
	Repository_Credential_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Repository_Credential_Kind}.String()
	Repository_Credential_KindAPIVersion   = Repository_Credential_Kind + "." + CRDGroupVersion.String()
	Repository_Credential_GroupVersionKind = CRDGroupVersion.WithKind(Repository_Credential_Kind)
)

func init() {
	SchemeBuilder.Register(&Repository_Credential{}, &Repository_CredentialList{})
}
