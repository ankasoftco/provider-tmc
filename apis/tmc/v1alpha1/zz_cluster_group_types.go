/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type Cluster_GroupMetaObservation struct {

	// Annotations for the resource
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Description of the resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Labels for the resource
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Resource version of the resource
	ResourceVersion *string `json:"resourceVersion,omitempty" tf:"resource_version,omitempty"`

	// UID of the resource
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type Cluster_GroupMetaParameters struct {

	// Annotations for the resource
	// +kubebuilder:validation:Optional
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Description of the resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Labels for the resource
	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`
}

type Cluster_GroupObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Metadata for the resource
	Meta []Cluster_GroupMetaObservation `json:"meta,omitempty" tf:"meta,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type Cluster_GroupParameters struct {

	// Metadata for the resource
	// +kubebuilder:validation:Optional
	Meta []Cluster_GroupMetaParameters `json:"meta,omitempty" tf:"meta,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

// Cluster_GroupSpec defines the desired state of Cluster_Group
type Cluster_GroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     Cluster_GroupParameters `json:"forProvider"`
}

// Cluster_GroupStatus defines the observed state of Cluster_Group.
type Cluster_GroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        Cluster_GroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Cluster_Group is the Schema for the Cluster_Groups API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tmc}
type Cluster_Group struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	Spec   Cluster_GroupSpec   `json:"spec"`
	Status Cluster_GroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// Cluster_GroupList contains a list of Cluster_Groups
type Cluster_GroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Cluster_Group `json:"items"`
}

// Repository type metadata.
var (
	Cluster_Group_Kind             = "Cluster_Group"
	Cluster_Group_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Cluster_Group_Kind}.String()
	Cluster_Group_KindAPIVersion   = Cluster_Group_Kind + "." + CRDGroupVersion.String()
	Cluster_Group_GroupVersionKind = CRDGroupVersion.WithKind(Cluster_Group_Kind)
)

func init() {
	SchemeBuilder.Register(&Cluster_Group{}, &Cluster_GroupList{})
}
