/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClusterGroupObservation struct {

	// Name of this cluster group
	ClusterGroup *string `json:"clusterGroup,omitempty" tf:"cluster_group,omitempty"`
}

type ClusterGroupParameters struct {

	// Name of this cluster group
	// +kubebuilder:validation:Required
	ClusterGroup *string `json:"clusterGroup" tf:"cluster_group,omitempty"`
}

type Custom_PolicyMetaObservation struct {

	// Annotations for the resource
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Description of the resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Labels for the resource
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Resource version of the resource
	ResourceVersion *string `json:"resourceVersion,omitempty" tf:"resource_version,omitempty"`

	// UID of the resource
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type Custom_PolicyMetaParameters struct {

	// Annotations for the resource
	// +kubebuilder:validation:Optional
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Description of the resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Labels for the resource
	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`
}

type Custom_PolicyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Metadata for the resource
	Meta []Custom_PolicyMetaObservation `json:"meta,omitempty" tf:"meta,omitempty"`

	// Name of the custom policy
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Scope for the custom, security, image, network and namespace quota policy, having one of the valid scopes for custom, security and namespace quota policy: cluster, cluster_group or organization and valid scopes for image and network policy: workspace or organization.
	Scope []ScopeObservation `json:"scope,omitempty" tf:"scope,omitempty"`

	// Spec for the custom policy
	Spec []Custom_PolicySpecObservation `json:"spec,omitempty" tf:"spec,omitempty"`
}

type Custom_PolicyParameters struct {

	// Metadata for the resource
	// +kubebuilder:validation:Optional
	Meta []Custom_PolicyMetaParameters `json:"meta,omitempty" tf:"meta,omitempty"`

	// Name of the custom policy
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Scope for the custom, security, image, network and namespace quota policy, having one of the valid scopes for custom, security and namespace quota policy: cluster, cluster_group or organization and valid scopes for image and network policy: workspace or organization.
	// +kubebuilder:validation:Optional
	Scope []ScopeParameters `json:"scope,omitempty" tf:"scope,omitempty"`

	// Spec for the custom policy
	// +kubebuilder:validation:Optional
	Spec []Custom_PolicySpecParameters `json:"spec,omitempty" tf:"spec,omitempty"`
}

type Custom_PolicySpecObservation struct {

	// Input for the custom policy, having one of the valid recipes: tmc_block_nodeport_service, tmc_block_resources, tmc_block_rolebinding_subjects, tmc_external_ips, tmc_https_ingress or tmc_require_labels.
	Input []InputObservation `json:"input,omitempty" tf:"input,omitempty"`

	// Label based Namespace Selector for the policy
	NamespaceSelector []NamespaceSelectorObservation `json:"namespaceSelector,omitempty" tf:"namespace_selector,omitempty"`
}

type Custom_PolicySpecParameters struct {

	// Input for the custom policy, having one of the valid recipes: tmc_block_nodeport_service, tmc_block_resources, tmc_block_rolebinding_subjects, tmc_external_ips, tmc_https_ingress or tmc_require_labels.
	// +kubebuilder:validation:Required
	Input []InputParameters `json:"input" tf:"input,omitempty"`

	// Label based Namespace Selector for the policy
	// +kubebuilder:validation:Optional
	NamespaceSelector []NamespaceSelectorParameters `json:"namespaceSelector,omitempty" tf:"namespace_selector,omitempty"`
}

type DisallowedSubjectsObservation struct {

	// The kind of subject to disallow, can be User/Group/ServiceAccount.
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// The name of the subject to disallow.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type DisallowedSubjectsParameters struct {

	// The kind of subject to disallow, can be User/Group/ServiceAccount.
	// +kubebuilder:validation:Required
	Kind *string `json:"kind" tf:"kind,omitempty"`

	// The name of the subject to disallow.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

type InputObservation struct {

	// The input schema for custom policy tmc_block_nodeport_service recipe version v1
	TmcBlockNodeportService []TmcBlockNodeportServiceObservation `json:"tmcBlockNodeportService,omitempty" tf:"tmc_block_nodeport_service,omitempty"`

	// The input schema for custom policy tmc_block_resources recipe version v1
	TmcBlockResources []TmcBlockResourcesObservation `json:"tmcBlockResources,omitempty" tf:"tmc_block_resources,omitempty"`

	// The input schema for custom policy tmc_block_rolebinding_subjects recipe version v1
	TmcBlockRolebindingSubjects []TmcBlockRolebindingSubjectsObservation `json:"tmcBlockRolebindingSubjects,omitempty" tf:"tmc_block_rolebinding_subjects,omitempty"`

	// The input schema for custom policy tmc_external_ips recipe version v1
	TmcExternalIps []TmcExternalIpsObservation `json:"tmcExternalIps,omitempty" tf:"tmc_external_ips,omitempty"`

	// The input schema for custom policy tmc_https_ingress recipe version v1
	TmcHTTPSIngress []TmcHTTPSIngressObservation `json:"tmcHttpsIngress,omitempty" tf:"tmc_https_ingress,omitempty"`

	// The input schema for custom policy tmc_require_labels recipe version v1
	TmcRequireLabels []TmcRequireLabelsObservation `json:"tmcRequireLabels,omitempty" tf:"tmc_require_labels,omitempty"`
}

type InputParameters struct {

	// The input schema for custom policy tmc_block_nodeport_service recipe version v1
	// +kubebuilder:validation:Optional
	TmcBlockNodeportService []TmcBlockNodeportServiceParameters `json:"tmcBlockNodeportService,omitempty" tf:"tmc_block_nodeport_service,omitempty"`

	// The input schema for custom policy tmc_block_resources recipe version v1
	// +kubebuilder:validation:Optional
	TmcBlockResources []TmcBlockResourcesParameters `json:"tmcBlockResources,omitempty" tf:"tmc_block_resources,omitempty"`

	// The input schema for custom policy tmc_block_rolebinding_subjects recipe version v1
	// +kubebuilder:validation:Optional
	TmcBlockRolebindingSubjects []TmcBlockRolebindingSubjectsParameters `json:"tmcBlockRolebindingSubjects,omitempty" tf:"tmc_block_rolebinding_subjects,omitempty"`

	// The input schema for custom policy tmc_external_ips recipe version v1
	// +kubebuilder:validation:Optional
	TmcExternalIps []TmcExternalIpsParameters `json:"tmcExternalIps,omitempty" tf:"tmc_external_ips,omitempty"`

	// The input schema for custom policy tmc_https_ingress recipe version v1
	// +kubebuilder:validation:Optional
	TmcHTTPSIngress []TmcHTTPSIngressParameters `json:"tmcHttpsIngress,omitempty" tf:"tmc_https_ingress,omitempty"`

	// The input schema for custom policy tmc_require_labels recipe version v1
	// +kubebuilder:validation:Optional
	TmcRequireLabels []TmcRequireLabelsParameters `json:"tmcRequireLabels,omitempty" tf:"tmc_require_labels,omitempty"`
}

type LabelsObservation struct {

	// The label key to enforce.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Optional label value to enforce (if left empty, only key will be enforced).
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type LabelsParameters struct {

	// The label key to enforce.
	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// Optional label value to enforce (if left empty, only key will be enforced).
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type MatchExpressionsObservation struct {

	// Key is the label key that the selector applies to
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Operator represents a key's relationship to a set of values
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// Values is an array of string values
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type MatchExpressionsParameters struct {

	// Key is the label key that the selector applies to
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Operator represents a key's relationship to a set of values
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// Values is an array of string values
	// +kubebuilder:validation:Required
	Values []*string `json:"values" tf:"values,omitempty"`
}

type NamespaceSelectorObservation struct {

	// Match expressions is a list of label selector requirements, the requirements are ANDed
	MatchExpressions []MatchExpressionsObservation `json:"matchExpressions,omitempty" tf:"match_expressions,omitempty"`
}

type NamespaceSelectorParameters struct {

	// Match expressions is a list of label selector requirements, the requirements are ANDed
	// +kubebuilder:validation:Required
	MatchExpressions []MatchExpressionsParameters `json:"matchExpressions" tf:"match_expressions,omitempty"`
}

type OrganizationObservation struct {

	// ID of this organization
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`
}

type OrganizationParameters struct {

	// ID of this organization
	// +kubebuilder:validation:Required
	Organization *string `json:"organization" tf:"organization,omitempty"`
}

type ParametersObservation struct {

	// Disallowed Subjects.
	DisallowedSubjects []DisallowedSubjectsObservation `json:"disallowedSubjects,omitempty" tf:"disallowed_subjects,omitempty"`
}

type ParametersParameters struct {

	// Disallowed Subjects.
	// +kubebuilder:validation:Required
	DisallowedSubjects []DisallowedSubjectsParameters `json:"disallowedSubjects" tf:"disallowed_subjects,omitempty"`
}

type ScopeClusterObservation struct {

	// Name of the management cluster
	ManagementClusterName *string `json:"managementClusterName,omitempty" tf:"management_cluster_name,omitempty"`

	// Name of this cluster
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Provisioner of the cluster
	ProvisionerName *string `json:"provisionerName,omitempty" tf:"provisioner_name,omitempty"`
}

type ScopeClusterParameters struct {

	// Name of the management cluster
	// +kubebuilder:validation:Optional
	ManagementClusterName *string `json:"managementClusterName,omitempty" tf:"management_cluster_name,omitempty"`

	// Name of this cluster
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Provisioner of the cluster
	// +kubebuilder:validation:Optional
	ProvisionerName *string `json:"provisionerName,omitempty" tf:"provisioner_name,omitempty"`
}

type ScopeObservation struct {

	// The schema for cluster policy full name
	Cluster []ScopeClusterObservation `json:"cluster,omitempty" tf:"cluster,omitempty"`

	// The schema for cluster group policy full name
	ClusterGroup []ClusterGroupObservation `json:"clusterGroup,omitempty" tf:"cluster_group,omitempty"`

	// The schema for organization policy full name
	Organization []OrganizationObservation `json:"organization,omitempty" tf:"organization,omitempty"`

	// The schema for workspace policy full name
	Workspace []ScopeWorkspaceObservation `json:"workspace,omitempty" tf:"workspace,omitempty"`
}

type ScopeParameters struct {

	// The schema for cluster policy full name
	// +kubebuilder:validation:Optional
	Cluster []ScopeClusterParameters `json:"cluster,omitempty" tf:"cluster,omitempty"`

	// The schema for cluster group policy full name
	// +kubebuilder:validation:Optional
	ClusterGroup []ClusterGroupParameters `json:"clusterGroup,omitempty" tf:"cluster_group,omitempty"`

	// The schema for organization policy full name
	// +kubebuilder:validation:Optional
	Organization []OrganizationParameters `json:"organization,omitempty" tf:"organization,omitempty"`

	// The schema for workspace policy full name
	// +kubebuilder:validation:Optional
	Workspace []ScopeWorkspaceParameters `json:"workspace,omitempty" tf:"workspace,omitempty"`
}

type ScopeWorkspaceObservation struct {

	// Name of this workspace
	Workspace *string `json:"workspace,omitempty" tf:"workspace,omitempty"`
}

type ScopeWorkspaceParameters struct {

	// Name of this workspace
	// +kubebuilder:validation:Required
	Workspace *string `json:"workspace" tf:"workspace,omitempty"`
}

type TargetKubernetesResourcesObservation struct {

	// APIGroup is a group containing the resource type.
	APIGroups []*string `json:"apiGroups,omitempty" tf:"api_groups,omitempty"`

	// Kind is the name of the object schema (resource type).
	Kinds []*string `json:"kinds,omitempty" tf:"kinds,omitempty"`
}

type TargetKubernetesResourcesParameters struct {

	// APIGroup is a group containing the resource type.
	// +kubebuilder:validation:Required
	APIGroups []*string `json:"apiGroups" tf:"api_groups,omitempty"`

	// Kind is the name of the object schema (resource type).
	// +kubebuilder:validation:Required
	Kinds []*string `json:"kinds" tf:"kinds,omitempty"`
}

type TmcBlockNodeportServiceObservation struct {

	// Audit (dry-run).
	Audit *bool `json:"audit,omitempty" tf:"audit,omitempty"`

	// A list of kubernetes api resources on which the policy will be enforced, identified using apiGroups and kinds.
	TargetKubernetesResources []TargetKubernetesResourcesObservation `json:"targetKubernetesResources,omitempty" tf:"target_kubernetes_resources,omitempty"`
}

type TmcBlockNodeportServiceParameters struct {

	// Audit (dry-run).
	// +kubebuilder:validation:Optional
	Audit *bool `json:"audit,omitempty" tf:"audit,omitempty"`

	// A list of kubernetes api resources on which the policy will be enforced, identified using apiGroups and kinds.
	// +kubebuilder:validation:Required
	TargetKubernetesResources []TargetKubernetesResourcesParameters `json:"targetKubernetesResources" tf:"target_kubernetes_resources,omitempty"`
}

type TmcBlockResourcesObservation struct {

	// Audit (dry-run).
	Audit *bool `json:"audit,omitempty" tf:"audit,omitempty"`

	// A list of kubernetes api resources on which the policy will be enforced, identified using apiGroups and kinds.
	TargetKubernetesResources []TmcBlockResourcesTargetKubernetesResourcesObservation `json:"targetKubernetesResources,omitempty" tf:"target_kubernetes_resources,omitempty"`
}

type TmcBlockResourcesParameters struct {

	// Audit (dry-run).
	// +kubebuilder:validation:Optional
	Audit *bool `json:"audit,omitempty" tf:"audit,omitempty"`

	// A list of kubernetes api resources on which the policy will be enforced, identified using apiGroups and kinds.
	// +kubebuilder:validation:Required
	TargetKubernetesResources []TmcBlockResourcesTargetKubernetesResourcesParameters `json:"targetKubernetesResources" tf:"target_kubernetes_resources,omitempty"`
}

type TmcBlockResourcesTargetKubernetesResourcesObservation struct {

	// APIGroup is a group containing the resource type.
	APIGroups []*string `json:"apiGroups,omitempty" tf:"api_groups,omitempty"`

	// Kind is the name of the object schema (resource type).
	Kinds []*string `json:"kinds,omitempty" tf:"kinds,omitempty"`
}

type TmcBlockResourcesTargetKubernetesResourcesParameters struct {

	// APIGroup is a group containing the resource type.
	// +kubebuilder:validation:Required
	APIGroups []*string `json:"apiGroups" tf:"api_groups,omitempty"`

	// Kind is the name of the object schema (resource type).
	// +kubebuilder:validation:Required
	Kinds []*string `json:"kinds" tf:"kinds,omitempty"`
}

type TmcBlockRolebindingSubjectsObservation struct {

	// Audit (dry-run).
	Audit *bool `json:"audit,omitempty" tf:"audit,omitempty"`

	// Parameters.
	Parameters []ParametersObservation `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// A list of kubernetes api resources on which the policy will be enforced, identified using apiGroups and kinds.
	TargetKubernetesResources []TmcBlockRolebindingSubjectsTargetKubernetesResourcesObservation `json:"targetKubernetesResources,omitempty" tf:"target_kubernetes_resources,omitempty"`
}

type TmcBlockRolebindingSubjectsParameters struct {

	// Audit (dry-run).
	// +kubebuilder:validation:Optional
	Audit *bool `json:"audit,omitempty" tf:"audit,omitempty"`

	// Parameters.
	// +kubebuilder:validation:Required
	Parameters []ParametersParameters `json:"parameters" tf:"parameters,omitempty"`

	// A list of kubernetes api resources on which the policy will be enforced, identified using apiGroups and kinds.
	// +kubebuilder:validation:Required
	TargetKubernetesResources []TmcBlockRolebindingSubjectsTargetKubernetesResourcesParameters `json:"targetKubernetesResources" tf:"target_kubernetes_resources,omitempty"`
}

type TmcBlockRolebindingSubjectsTargetKubernetesResourcesObservation struct {

	// APIGroup is a group containing the resource type.
	APIGroups []*string `json:"apiGroups,omitempty" tf:"api_groups,omitempty"`

	// Kind is the name of the object schema (resource type).
	Kinds []*string `json:"kinds,omitempty" tf:"kinds,omitempty"`
}

type TmcBlockRolebindingSubjectsTargetKubernetesResourcesParameters struct {

	// APIGroup is a group containing the resource type.
	// +kubebuilder:validation:Required
	APIGroups []*string `json:"apiGroups" tf:"api_groups,omitempty"`

	// Kind is the name of the object schema (resource type).
	// +kubebuilder:validation:Required
	Kinds []*string `json:"kinds" tf:"kinds,omitempty"`
}

type TmcExternalIpsObservation struct {

	// Audit (dry-run).
	Audit *bool `json:"audit,omitempty" tf:"audit,omitempty"`

	// Parameters.
	Parameters []TmcExternalIpsParametersObservation `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// A list of kubernetes api resources on which the policy will be enforced, identified using apiGroups and kinds.
	TargetKubernetesResources []TmcExternalIpsTargetKubernetesResourcesObservation `json:"targetKubernetesResources,omitempty" tf:"target_kubernetes_resources,omitempty"`
}

type TmcExternalIpsParameters struct {

	// Audit (dry-run).
	// +kubebuilder:validation:Optional
	Audit *bool `json:"audit,omitempty" tf:"audit,omitempty"`

	// Parameters.
	// +kubebuilder:validation:Required
	Parameters []TmcExternalIpsParametersParameters `json:"parameters" tf:"parameters,omitempty"`

	// A list of kubernetes api resources on which the policy will be enforced, identified using apiGroups and kinds.
	// +kubebuilder:validation:Required
	TargetKubernetesResources []TmcExternalIpsTargetKubernetesResourcesParameters `json:"targetKubernetesResources" tf:"target_kubernetes_resources,omitempty"`
}

type TmcExternalIpsParametersObservation struct {

	// Allowed IPs.
	AllowedIps []*string `json:"allowedIps,omitempty" tf:"allowed_ips,omitempty"`
}

type TmcExternalIpsParametersParameters struct {

	// Allowed IPs.
	// +kubebuilder:validation:Required
	AllowedIps []*string `json:"allowedIps" tf:"allowed_ips,omitempty"`
}

type TmcExternalIpsTargetKubernetesResourcesObservation struct {

	// APIGroup is a group containing the resource type.
	APIGroups []*string `json:"apiGroups,omitempty" tf:"api_groups,omitempty"`

	// Kind is the name of the object schema (resource type).
	Kinds []*string `json:"kinds,omitempty" tf:"kinds,omitempty"`
}

type TmcExternalIpsTargetKubernetesResourcesParameters struct {

	// APIGroup is a group containing the resource type.
	// +kubebuilder:validation:Required
	APIGroups []*string `json:"apiGroups" tf:"api_groups,omitempty"`

	// Kind is the name of the object schema (resource type).
	// +kubebuilder:validation:Required
	Kinds []*string `json:"kinds" tf:"kinds,omitempty"`
}

type TmcHTTPSIngressObservation struct {

	// Audit (dry-run).
	Audit *bool `json:"audit,omitempty" tf:"audit,omitempty"`

	// A list of kubernetes api resources on which the policy will be enforced, identified using apiGroups and kinds.
	TargetKubernetesResources []TmcHTTPSIngressTargetKubernetesResourcesObservation `json:"targetKubernetesResources,omitempty" tf:"target_kubernetes_resources,omitempty"`
}

type TmcHTTPSIngressParameters struct {

	// Audit (dry-run).
	// +kubebuilder:validation:Optional
	Audit *bool `json:"audit,omitempty" tf:"audit,omitempty"`

	// A list of kubernetes api resources on which the policy will be enforced, identified using apiGroups and kinds.
	// +kubebuilder:validation:Required
	TargetKubernetesResources []TmcHTTPSIngressTargetKubernetesResourcesParameters `json:"targetKubernetesResources" tf:"target_kubernetes_resources,omitempty"`
}

type TmcHTTPSIngressTargetKubernetesResourcesObservation struct {

	// APIGroup is a group containing the resource type.
	APIGroups []*string `json:"apiGroups,omitempty" tf:"api_groups,omitempty"`

	// Kind is the name of the object schema (resource type).
	Kinds []*string `json:"kinds,omitempty" tf:"kinds,omitempty"`
}

type TmcHTTPSIngressTargetKubernetesResourcesParameters struct {

	// APIGroup is a group containing the resource type.
	// +kubebuilder:validation:Required
	APIGroups []*string `json:"apiGroups" tf:"api_groups,omitempty"`

	// Kind is the name of the object schema (resource type).
	// +kubebuilder:validation:Required
	Kinds []*string `json:"kinds" tf:"kinds,omitempty"`
}

type TmcRequireLabelsObservation struct {

	// Audit (dry-run).
	Audit *bool `json:"audit,omitempty" tf:"audit,omitempty"`

	// Parameters.
	Parameters []TmcRequireLabelsParametersObservation `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// A list of kubernetes api resources on which the policy will be enforced, identified using apiGroups and kinds.
	TargetKubernetesResources []TmcRequireLabelsTargetKubernetesResourcesObservation `json:"targetKubernetesResources,omitempty" tf:"target_kubernetes_resources,omitempty"`
}

type TmcRequireLabelsParameters struct {

	// Audit (dry-run).
	// +kubebuilder:validation:Optional
	Audit *bool `json:"audit,omitempty" tf:"audit,omitempty"`

	// Parameters.
	// +kubebuilder:validation:Required
	Parameters []TmcRequireLabelsParametersParameters `json:"parameters" tf:"parameters,omitempty"`

	// A list of kubernetes api resources on which the policy will be enforced, identified using apiGroups and kinds.
	// +kubebuilder:validation:Required
	TargetKubernetesResources []TmcRequireLabelsTargetKubernetesResourcesParameters `json:"targetKubernetesResources" tf:"target_kubernetes_resources,omitempty"`
}

type TmcRequireLabelsParametersObservation struct {

	// Labels.
	Labels []LabelsObservation `json:"labels,omitempty" tf:"labels,omitempty"`
}

type TmcRequireLabelsParametersParameters struct {

	// Labels.
	// +kubebuilder:validation:Required
	Labels []LabelsParameters `json:"labels" tf:"labels,omitempty"`
}

type TmcRequireLabelsTargetKubernetesResourcesObservation struct {

	// APIGroup is a group containing the resource type.
	APIGroups []*string `json:"apiGroups,omitempty" tf:"api_groups,omitempty"`

	// Kind is the name of the object schema (resource type).
	Kinds []*string `json:"kinds,omitempty" tf:"kinds,omitempty"`
}

type TmcRequireLabelsTargetKubernetesResourcesParameters struct {

	// APIGroup is a group containing the resource type.
	// +kubebuilder:validation:Required
	APIGroups []*string `json:"apiGroups" tf:"api_groups,omitempty"`

	// Kind is the name of the object schema (resource type).
	// +kubebuilder:validation:Required
	Kinds []*string `json:"kinds" tf:"kinds,omitempty"`
}

// Custom_PolicySpec defines the desired state of Custom_Policy
type Custom_PolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     Custom_PolicyParameters `json:"forProvider"`
}

// Custom_PolicyStatus defines the observed state of Custom_Policy.
type Custom_PolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        Custom_PolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Custom_Policy is the Schema for the Custom_Policys API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tmc}
type Custom_Policy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.scope)",message="scope is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.spec)",message="spec is a required parameter"
	Spec   Custom_PolicySpec   `json:"spec"`
	Status Custom_PolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// Custom_PolicyList contains a list of Custom_Policys
type Custom_PolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Custom_Policy `json:"items"`
}

// Repository type metadata.
var (
	Custom_Policy_Kind             = "Custom_Policy"
	Custom_Policy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Custom_Policy_Kind}.String()
	Custom_Policy_KindAPIVersion   = Custom_Policy_Kind + "." + CRDGroupVersion.String()
	Custom_Policy_GroupVersionKind = CRDGroupVersion.WithKind(Custom_Policy_Kind)
)

func init() {
	SchemeBuilder.Register(&Custom_Policy{}, &Custom_PolicyList{})
}
