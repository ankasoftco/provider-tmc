/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DockerConfigJSONObservation struct {

	// SecretType definition - Server URL of the registry.
	ImageRegistryURL *string `json:"imageRegistryUrl,omitempty" tf:"image_registry_url,omitempty"`

	// SecretType definition - Username of the registry.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type DockerConfigJSONParameters struct {

	// SecretType definition - Server URL of the registry.
	// +kubebuilder:validation:Required
	ImageRegistryURL *string `json:"imageRegistryUrl" tf:"image_registry_url,omitempty"`

	// SecretType definition - Password of the registry.
	// +kubebuilder:validation:Required
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// SecretType definition - Username of the registry.
	// +kubebuilder:validation:Required
	Username *string `json:"username" tf:"username,omitempty"`
}

type Kubernetes_SecretMetaObservation struct {

	// Annotations for the resource
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Description of the resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Labels for the resource
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Resource version of the resource
	ResourceVersion *string `json:"resourceVersion,omitempty" tf:"resource_version,omitempty"`

	// UID of the resource
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type Kubernetes_SecretMetaParameters struct {

	// Annotations for the resource
	// +kubebuilder:validation:Optional
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Description of the resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Labels for the resource
	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`
}

type Kubernetes_SecretObservation struct {

	// Export the secret to all namespaces.
	Export *bool `json:"export,omitempty" tf:"export,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Metadata for the resource
	Meta []Kubernetes_SecretMetaObservation `json:"meta,omitempty" tf:"meta,omitempty"`

	// Name of the secret resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of Namespace where secret will be created.
	NamespaceName *string `json:"namespaceName,omitempty" tf:"namespace_name,omitempty"`

	// ID of Organization.
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// Scope for the secret having one of the valid scopes for secret: currently we have only cluster scope
	Scope []Kubernetes_SecretScopeObservation `json:"scope,omitempty" tf:"scope,omitempty"`

	// Spec for the kubernetes secret
	Spec []Kubernetes_SecretSpecObservation `json:"spec,omitempty" tf:"spec,omitempty"`

	// Status for the Secret Export.
	Status map[string]*string `json:"status,omitempty" tf:"status,omitempty"`
}

type Kubernetes_SecretParameters struct {

	// Export the secret to all namespaces.
	// +kubebuilder:validation:Optional
	Export *bool `json:"export,omitempty" tf:"export,omitempty"`

	// Metadata for the resource
	// +kubebuilder:validation:Optional
	Meta []Kubernetes_SecretMetaParameters `json:"meta,omitempty" tf:"meta,omitempty"`

	// Name of the secret resource.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of Namespace where secret will be created.
	// +kubebuilder:validation:Optional
	NamespaceName *string `json:"namespaceName,omitempty" tf:"namespace_name,omitempty"`

	// ID of Organization.
	// +kubebuilder:validation:Optional
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// Scope for the secret having one of the valid scopes for secret: currently we have only cluster scope
	// +kubebuilder:validation:Optional
	Scope []Kubernetes_SecretScopeParameters `json:"scope,omitempty" tf:"scope,omitempty"`

	// Spec for the kubernetes secret
	// +kubebuilder:validation:Optional
	Spec []Kubernetes_SecretSpecParameters `json:"spec,omitempty" tf:"spec,omitempty"`
}

type Kubernetes_SecretScopeClusterObservation struct {

	// Name of this cluster
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	// Name of the management cluster
	ManagementClusterName *string `json:"managementClusterName,omitempty" tf:"management_cluster_name,omitempty"`

	// Provisioner of the cluster
	ProvisionerName *string `json:"provisionerName,omitempty" tf:"provisioner_name,omitempty"`
}

type Kubernetes_SecretScopeClusterParameters struct {

	// Name of this cluster
	// +kubebuilder:validation:Required
	ClusterName *string `json:"clusterName" tf:"cluster_name,omitempty"`

	// Name of the management cluster
	// +kubebuilder:validation:Optional
	ManagementClusterName *string `json:"managementClusterName,omitempty" tf:"management_cluster_name,omitempty"`

	// Provisioner of the cluster
	// +kubebuilder:validation:Optional
	ProvisionerName *string `json:"provisionerName,omitempty" tf:"provisioner_name,omitempty"`
}

type Kubernetes_SecretScopeObservation struct {

	// The schema for cluster secret full name
	Cluster []Kubernetes_SecretScopeClusterObservation `json:"cluster,omitempty" tf:"cluster,omitempty"`
}

type Kubernetes_SecretScopeParameters struct {

	// The schema for cluster secret full name
	// +kubebuilder:validation:Optional
	Cluster []Kubernetes_SecretScopeClusterParameters `json:"cluster,omitempty" tf:"cluster,omitempty"`
}

type Kubernetes_SecretSpecObservation struct {

	// SecretType definition - SECRET_TYPE_DOCKERCONFIGJSON, Kubernetes secrets type.
	DockerConfigJSON []DockerConfigJSONObservation `json:"dockerConfigJson,omitempty" tf:"docker_config_json,omitempty"`
}

type Kubernetes_SecretSpecParameters struct {

	// SecretType definition - SECRET_TYPE_DOCKERCONFIGJSON, Kubernetes secrets type.
	// +kubebuilder:validation:Required
	DockerConfigJSON []DockerConfigJSONParameters `json:"dockerConfigJson" tf:"docker_config_json,omitempty"`
}

// Kubernetes_SecretSpec defines the desired state of Kubernetes_Secret
type Kubernetes_SecretSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     Kubernetes_SecretParameters `json:"forProvider"`
}

// Kubernetes_SecretStatus defines the observed state of Kubernetes_Secret.
type Kubernetes_SecretStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        Kubernetes_SecretObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Kubernetes_Secret is the Schema for the Kubernetes_Secrets API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tmc}
type Kubernetes_Secret struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.namespaceName)",message="namespaceName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.scope)",message="scope is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.spec)",message="spec is a required parameter"
	Spec   Kubernetes_SecretSpec   `json:"spec"`
	Status Kubernetes_SecretStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// Kubernetes_SecretList contains a list of Kubernetes_Secrets
type Kubernetes_SecretList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Kubernetes_Secret `json:"items"`
}

// Repository type metadata.
var (
	Kubernetes_Secret_Kind             = "Kubernetes_Secret"
	Kubernetes_Secret_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Kubernetes_Secret_Kind}.String()
	Kubernetes_Secret_KindAPIVersion   = Kubernetes_Secret_Kind + "." + CRDGroupVersion.String()
	Kubernetes_Secret_GroupVersionKind = CRDGroupVersion.WithKind(Kubernetes_Secret_Kind)
)

func init() {
	SchemeBuilder.Register(&Kubernetes_Secret{}, &Kubernetes_SecretList{})
}
