/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AllowedHostPathsObservation struct {

	// Path prefix
	PathPrefix *string `json:"pathPrefix,omitempty" tf:"path_prefix,omitempty"`

	// Read only flag
	ReadOnly *bool `json:"readOnly,omitempty" tf:"read_only,omitempty"`
}

type AllowedHostPathsParameters struct {

	// Path prefix
	// +kubebuilder:validation:Optional
	PathPrefix *string `json:"pathPrefix,omitempty" tf:"path_prefix,omitempty"`

	// Read only flag
	// +kubebuilder:validation:Optional
	ReadOnly *bool `json:"readOnly,omitempty" tf:"read_only,omitempty"`
}

type AllowedHostPortRangeObservation struct {

	// Maximum allowed port
	Max *float64 `json:"max,omitempty" tf:"max,omitempty"`

	// Minimum allowed port
	Min *float64 `json:"min,omitempty" tf:"min,omitempty"`
}

type AllowedHostPortRangeParameters struct {

	// Maximum allowed port
	// +kubebuilder:validation:Optional
	Max *float64 `json:"max,omitempty" tf:"max,omitempty"`

	// Minimum allowed port
	// +kubebuilder:validation:Optional
	Min *float64 `json:"min,omitempty" tf:"min,omitempty"`
}

type AllowedSeLinuxOptionsObservation struct {

	// SELinux level
	Level *string `json:"level,omitempty" tf:"level,omitempty"`

	// SELinux role
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// SELinux type
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// SELinux user
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type AllowedSeLinuxOptionsParameters struct {

	// SELinux level
	// +kubebuilder:validation:Optional
	Level *string `json:"level,omitempty" tf:"level,omitempty"`

	// SELinux role
	// +kubebuilder:validation:Optional
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// SELinux type
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// SELinux user
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type BaselineObservation struct {

	// Audit (dry-run)
	Audit *bool `json:"audit,omitempty" tf:"audit,omitempty"`

	// Disable native pod security policy
	DisableNativePsp *bool `json:"disableNativePsp,omitempty" tf:"disable_native_psp,omitempty"`
}

type BaselineParameters struct {

	// Audit (dry-run)
	// +kubebuilder:validation:Optional
	Audit *bool `json:"audit,omitempty" tf:"audit,omitempty"`

	// Disable native pod security policy
	// +kubebuilder:validation:Optional
	DisableNativePsp *bool `json:"disableNativePsp,omitempty" tf:"disable_native_psp,omitempty"`
}

type FsGroupObservation struct {

	// Allowed group id ranges
	Ranges []RangesObservation `json:"ranges,omitempty" tf:"ranges,omitempty"`

	// Rule
	Rule *string `json:"rule,omitempty" tf:"rule,omitempty"`
}

type FsGroupParameters struct {

	// Allowed group id ranges
	// +kubebuilder:validation:Optional
	Ranges []RangesParameters `json:"ranges,omitempty" tf:"ranges,omitempty"`

	// Rule
	// +kubebuilder:validation:Optional
	Rule *string `json:"rule,omitempty" tf:"rule,omitempty"`
}

type LinuxCapabilitiesObservation struct {

	// Allowed capabilities
	AllowedCapabilities []*string `json:"allowedCapabilities,omitempty" tf:"allowed_capabilities,omitempty"`

	// Required drop capabilities
	RequiredDropCapabilities []*string `json:"requiredDropCapabilities,omitempty" tf:"required_drop_capabilities,omitempty"`
}

type LinuxCapabilitiesParameters struct {

	// Allowed capabilities
	// +kubebuilder:validation:Optional
	AllowedCapabilities []*string `json:"allowedCapabilities,omitempty" tf:"allowed_capabilities,omitempty"`

	// Required drop capabilities
	// +kubebuilder:validation:Optional
	RequiredDropCapabilities []*string `json:"requiredDropCapabilities,omitempty" tf:"required_drop_capabilities,omitempty"`
}

type RangesObservation struct {

	// Maximum group ID
	Max *float64 `json:"max,omitempty" tf:"max,omitempty"`

	// Minimum group ID
	Min *float64 `json:"min,omitempty" tf:"min,omitempty"`
}

type RangesParameters struct {

	// Maximum group ID
	// +kubebuilder:validation:Optional
	Max *float64 `json:"max,omitempty" tf:"max,omitempty"`

	// Minimum group ID
	// +kubebuilder:validation:Optional
	Min *float64 `json:"min,omitempty" tf:"min,omitempty"`
}

type RunAsGroupObservation struct {

	// Allowed group id ranges
	Ranges []RunAsGroupRangesObservation `json:"ranges,omitempty" tf:"ranges,omitempty"`

	// Rule
	Rule *string `json:"rule,omitempty" tf:"rule,omitempty"`
}

type RunAsGroupParameters struct {

	// Allowed group id ranges
	// +kubebuilder:validation:Optional
	Ranges []RunAsGroupRangesParameters `json:"ranges,omitempty" tf:"ranges,omitempty"`

	// Rule
	// +kubebuilder:validation:Optional
	Rule *string `json:"rule,omitempty" tf:"rule,omitempty"`
}

type RunAsGroupRangesObservation struct {

	// Maximum group ID
	Max *float64 `json:"max,omitempty" tf:"max,omitempty"`

	// Minimum group ID
	Min *float64 `json:"min,omitempty" tf:"min,omitempty"`
}

type RunAsGroupRangesParameters struct {

	// Maximum group ID
	// +kubebuilder:validation:Optional
	Max *float64 `json:"max,omitempty" tf:"max,omitempty"`

	// Minimum group ID
	// +kubebuilder:validation:Optional
	Min *float64 `json:"min,omitempty" tf:"min,omitempty"`
}

type RunAsUserObservation struct {

	// Allowed user id ranges
	Ranges []RunAsUserRangesObservation `json:"ranges,omitempty" tf:"ranges,omitempty"`

	// Rule
	Rule *string `json:"rule,omitempty" tf:"rule,omitempty"`
}

type RunAsUserParameters struct {

	// Allowed user id ranges
	// +kubebuilder:validation:Optional
	Ranges []RunAsUserRangesParameters `json:"ranges,omitempty" tf:"ranges,omitempty"`

	// Rule
	// +kubebuilder:validation:Optional
	Rule *string `json:"rule,omitempty" tf:"rule,omitempty"`
}

type RunAsUserRangesObservation struct {

	// Maximum user ID
	Max *float64 `json:"max,omitempty" tf:"max,omitempty"`

	// Minimum user ID
	Min *float64 `json:"min,omitempty" tf:"min,omitempty"`
}

type RunAsUserRangesParameters struct {

	// Maximum user ID
	// +kubebuilder:validation:Optional
	Max *float64 `json:"max,omitempty" tf:"max,omitempty"`

	// Minimum user ID
	// +kubebuilder:validation:Optional
	Min *float64 `json:"min,omitempty" tf:"min,omitempty"`
}

type SeccompObservation struct {

	// Allowed local host files
	AllowedLocalhostFiles []*string `json:"allowedLocalhostFiles,omitempty" tf:"allowed_localhost_files,omitempty"`

	// Allowed profiles
	AllowedProfiles []*string `json:"allowedProfiles,omitempty" tf:"allowed_profiles,omitempty"`
}

type SeccompParameters struct {

	// Allowed local host files
	// +kubebuilder:validation:Optional
	AllowedLocalhostFiles []*string `json:"allowedLocalhostFiles,omitempty" tf:"allowed_localhost_files,omitempty"`

	// Allowed profiles
	// +kubebuilder:validation:Optional
	AllowedProfiles []*string `json:"allowedProfiles,omitempty" tf:"allowed_profiles,omitempty"`
}

type SecurityPolicyMetaObservation struct {

	// Annotations for the resource
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Description of the resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Labels for the resource
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Resource version of the resource
	ResourceVersion *string `json:"resourceVersion,omitempty" tf:"resource_version,omitempty"`

	// UID of the resource
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type SecurityPolicyMetaParameters struct {

	// Annotations for the resource
	// +kubebuilder:validation:Optional
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Description of the resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Labels for the resource
	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`
}

type SecurityPolicyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Metadata for the resource
	Meta []SecurityPolicyMetaObservation `json:"meta,omitempty" tf:"meta,omitempty"`

	// Name of the security policy
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Scope for the custom, security, image, network, namespace quota and mutation policy, having one of the valid scopes for custom, security, mutation, and namespace quota policy: cluster, cluster_group or organization and valid scopes for image and network policy: workspace or organization.
	Scope []SecurityPolicyScopeObservation `json:"scope,omitempty" tf:"scope,omitempty"`

	// Spec for the security policy
	Spec []SecurityPolicySpecObservation `json:"spec,omitempty" tf:"spec,omitempty"`
}

type SecurityPolicyParameters struct {

	// Metadata for the resource
	// +kubebuilder:validation:Optional
	Meta []SecurityPolicyMetaParameters `json:"meta,omitempty" tf:"meta,omitempty"`

	// Name of the security policy
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Scope for the custom, security, image, network, namespace quota and mutation policy, having one of the valid scopes for custom, security, mutation, and namespace quota policy: cluster, cluster_group or organization and valid scopes for image and network policy: workspace or organization.
	// +kubebuilder:validation:Optional
	Scope []SecurityPolicyScopeParameters `json:"scope,omitempty" tf:"scope,omitempty"`

	// Spec for the security policy
	// +kubebuilder:validation:Optional
	Spec []SecurityPolicySpecParameters `json:"spec,omitempty" tf:"spec,omitempty"`
}

type SecurityPolicyScopeClusterGroupObservation struct {

	// Name of this cluster group
	ClusterGroup *string `json:"clusterGroup,omitempty" tf:"cluster_group,omitempty"`
}

type SecurityPolicyScopeClusterGroupParameters struct {

	// Name of this cluster group
	// +kubebuilder:validation:Required
	ClusterGroup *string `json:"clusterGroup" tf:"cluster_group,omitempty"`
}

type SecurityPolicyScopeClusterObservation struct {

	// Name of the management cluster
	ManagementClusterName *string `json:"managementClusterName,omitempty" tf:"management_cluster_name,omitempty"`

	// Name of this cluster
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Provisioner of the cluster
	ProvisionerName *string `json:"provisionerName,omitempty" tf:"provisioner_name,omitempty"`
}

type SecurityPolicyScopeClusterParameters struct {

	// Name of the management cluster
	// +kubebuilder:validation:Optional
	ManagementClusterName *string `json:"managementClusterName,omitempty" tf:"management_cluster_name,omitempty"`

	// Name of this cluster
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Provisioner of the cluster
	// +kubebuilder:validation:Optional
	ProvisionerName *string `json:"provisionerName,omitempty" tf:"provisioner_name,omitempty"`
}

type SecurityPolicyScopeObservation struct {

	// The schema for cluster policy full name
	Cluster []SecurityPolicyScopeClusterObservation `json:"cluster,omitempty" tf:"cluster,omitempty"`

	// The schema for cluster group policy full name
	ClusterGroup []SecurityPolicyScopeClusterGroupObservation `json:"clusterGroup,omitempty" tf:"cluster_group,omitempty"`

	// The schema for organization policy full name
	Organization []SecurityPolicyScopeOrganizationObservation `json:"organization,omitempty" tf:"organization,omitempty"`

	// The schema for workspace policy full name
	Workspace []SecurityPolicyScopeWorkspaceObservation `json:"workspace,omitempty" tf:"workspace,omitempty"`
}

type SecurityPolicyScopeOrganizationObservation struct {

	// ID of this organization
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`
}

type SecurityPolicyScopeOrganizationParameters struct {

	// ID of this organization
	// +kubebuilder:validation:Required
	Organization *string `json:"organization" tf:"organization,omitempty"`
}

type SecurityPolicyScopeParameters struct {

	// The schema for cluster policy full name
	// +kubebuilder:validation:Optional
	Cluster []SecurityPolicyScopeClusterParameters `json:"cluster,omitempty" tf:"cluster,omitempty"`

	// The schema for cluster group policy full name
	// +kubebuilder:validation:Optional
	ClusterGroup []SecurityPolicyScopeClusterGroupParameters `json:"clusterGroup,omitempty" tf:"cluster_group,omitempty"`

	// The schema for organization policy full name
	// +kubebuilder:validation:Optional
	Organization []SecurityPolicyScopeOrganizationParameters `json:"organization,omitempty" tf:"organization,omitempty"`

	// The schema for workspace policy full name
	// +kubebuilder:validation:Optional
	Workspace []SecurityPolicyScopeWorkspaceParameters `json:"workspace,omitempty" tf:"workspace,omitempty"`
}

type SecurityPolicyScopeWorkspaceObservation struct {

	// Name of this workspace
	Workspace *string `json:"workspace,omitempty" tf:"workspace,omitempty"`
}

type SecurityPolicyScopeWorkspaceParameters struct {

	// Name of this workspace
	// +kubebuilder:validation:Required
	Workspace *string `json:"workspace" tf:"workspace,omitempty"`
}

type SecurityPolicySpecInputCustomObservation struct {

	// Allow host namespace sharing
	AllowHostNamespaceSharing *bool `json:"allowHostNamespaceSharing,omitempty" tf:"allow_host_namespace_sharing,omitempty"`

	// Allow host network
	AllowHostNetwork *bool `json:"allowHostNetwork,omitempty" tf:"allow_host_network,omitempty"`

	// Allow privilege escalation
	AllowPrivilegeEscalation *bool `json:"allowPrivilegeEscalation,omitempty" tf:"allow_privilege_escalation,omitempty"`

	// Allow privileged containers
	AllowPrivilegedContainers *bool `json:"allowPrivilegedContainers,omitempty" tf:"allow_privileged_containers,omitempty"`

	// Allowed host paths
	AllowedHostPaths []AllowedHostPathsObservation `json:"allowedHostPaths,omitempty" tf:"allowed_host_paths,omitempty"`

	// Allowed host port range
	AllowedHostPortRange []AllowedHostPortRangeObservation `json:"allowedHostPortRange,omitempty" tf:"allowed_host_port_range,omitempty"`

	// Allowed selinux options
	AllowedSeLinuxOptions []AllowedSeLinuxOptionsObservation `json:"allowedSeLinuxOptions,omitempty" tf:"allowed_se_linux_options,omitempty"`

	// Allowed volumes
	AllowedVolumes []*string `json:"allowedVolumes,omitempty" tf:"allowed_volumes,omitempty"`

	// Audit (dry-run)
	Audit *bool `json:"audit,omitempty" tf:"audit,omitempty"`

	// Disable native pod security policy
	DisableNativePsp *bool `json:"disableNativePsp,omitempty" tf:"disable_native_psp,omitempty"`

	// fsGroup
	FsGroup []FsGroupObservation `json:"fsGroup,omitempty" tf:"fs_group,omitempty"`

	// Linux capabilities
	LinuxCapabilities []LinuxCapabilitiesObservation `json:"linuxCapabilities,omitempty" tf:"linux_capabilities,omitempty"`

	// Read only root file system
	ReadOnlyRootFileSystem *bool `json:"readOnlyRootFileSystem,omitempty" tf:"read_only_root_file_system,omitempty"`

	// Run as group
	RunAsGroup []RunAsGroupObservation `json:"runAsGroup,omitempty" tf:"run_as_group,omitempty"`

	// Run as user
	RunAsUser []RunAsUserObservation `json:"runAsUser,omitempty" tf:"run_as_user,omitempty"`

	// Seccomp
	Seccomp []SeccompObservation `json:"seccomp,omitempty" tf:"seccomp,omitempty"`

	// supplemental groups
	SupplementalGroups []SupplementalGroupsObservation `json:"supplementalGroups,omitempty" tf:"supplemental_groups,omitempty"`

	// Sysctls
	Sysctls []SysctlsObservation `json:"sysctls,omitempty" tf:"sysctls,omitempty"`
}

type SecurityPolicySpecInputCustomParameters struct {

	// Allow host namespace sharing
	// +kubebuilder:validation:Optional
	AllowHostNamespaceSharing *bool `json:"allowHostNamespaceSharing,omitempty" tf:"allow_host_namespace_sharing,omitempty"`

	// Allow host network
	// +kubebuilder:validation:Optional
	AllowHostNetwork *bool `json:"allowHostNetwork,omitempty" tf:"allow_host_network,omitempty"`

	// Allow privilege escalation
	// +kubebuilder:validation:Optional
	AllowPrivilegeEscalation *bool `json:"allowPrivilegeEscalation,omitempty" tf:"allow_privilege_escalation,omitempty"`

	// Allow privileged containers
	// +kubebuilder:validation:Optional
	AllowPrivilegedContainers *bool `json:"allowPrivilegedContainers,omitempty" tf:"allow_privileged_containers,omitempty"`

	// Allowed host paths
	// +kubebuilder:validation:Optional
	AllowedHostPaths []AllowedHostPathsParameters `json:"allowedHostPaths,omitempty" tf:"allowed_host_paths,omitempty"`

	// Allowed host port range
	// +kubebuilder:validation:Optional
	AllowedHostPortRange []AllowedHostPortRangeParameters `json:"allowedHostPortRange,omitempty" tf:"allowed_host_port_range,omitempty"`

	// Allowed selinux options
	// +kubebuilder:validation:Optional
	AllowedSeLinuxOptions []AllowedSeLinuxOptionsParameters `json:"allowedSeLinuxOptions,omitempty" tf:"allowed_se_linux_options,omitempty"`

	// Allowed volumes
	// +kubebuilder:validation:Optional
	AllowedVolumes []*string `json:"allowedVolumes,omitempty" tf:"allowed_volumes,omitempty"`

	// Audit (dry-run)
	// +kubebuilder:validation:Optional
	Audit *bool `json:"audit,omitempty" tf:"audit,omitempty"`

	// Disable native pod security policy
	// +kubebuilder:validation:Optional
	DisableNativePsp *bool `json:"disableNativePsp,omitempty" tf:"disable_native_psp,omitempty"`

	// fsGroup
	// +kubebuilder:validation:Optional
	FsGroup []FsGroupParameters `json:"fsGroup,omitempty" tf:"fs_group,omitempty"`

	// Linux capabilities
	// +kubebuilder:validation:Optional
	LinuxCapabilities []LinuxCapabilitiesParameters `json:"linuxCapabilities,omitempty" tf:"linux_capabilities,omitempty"`

	// Read only root file system
	// +kubebuilder:validation:Optional
	ReadOnlyRootFileSystem *bool `json:"readOnlyRootFileSystem,omitempty" tf:"read_only_root_file_system,omitempty"`

	// Run as group
	// +kubebuilder:validation:Optional
	RunAsGroup []RunAsGroupParameters `json:"runAsGroup,omitempty" tf:"run_as_group,omitempty"`

	// Run as user
	// +kubebuilder:validation:Optional
	RunAsUser []RunAsUserParameters `json:"runAsUser,omitempty" tf:"run_as_user,omitempty"`

	// Seccomp
	// +kubebuilder:validation:Optional
	Seccomp []SeccompParameters `json:"seccomp,omitempty" tf:"seccomp,omitempty"`

	// supplemental groups
	// +kubebuilder:validation:Optional
	SupplementalGroups []SupplementalGroupsParameters `json:"supplementalGroups,omitempty" tf:"supplemental_groups,omitempty"`

	// Sysctls
	// +kubebuilder:validation:Optional
	Sysctls []SysctlsParameters `json:"sysctls,omitempty" tf:"sysctls,omitempty"`
}

type SecurityPolicySpecInputObservation struct {

	// The input schema for security policy baseline recipe version v1
	Baseline []BaselineObservation `json:"baseline,omitempty" tf:"baseline,omitempty"`

	// The input schema for security policy custom recipe version v1
	Custom []SecurityPolicySpecInputCustomObservation `json:"custom,omitempty" tf:"custom,omitempty"`

	// The input schema for security policy strict recipe version v1
	Strict []StrictObservation `json:"strict,omitempty" tf:"strict,omitempty"`
}

type SecurityPolicySpecInputParameters struct {

	// The input schema for security policy baseline recipe version v1
	// +kubebuilder:validation:Optional
	Baseline []BaselineParameters `json:"baseline,omitempty" tf:"baseline,omitempty"`

	// The input schema for security policy custom recipe version v1
	// +kubebuilder:validation:Optional
	Custom []SecurityPolicySpecInputCustomParameters `json:"custom,omitempty" tf:"custom,omitempty"`

	// The input schema for security policy strict recipe version v1
	// +kubebuilder:validation:Optional
	Strict []StrictParameters `json:"strict,omitempty" tf:"strict,omitempty"`
}

type SecurityPolicySpecNamespaceSelectorMatchExpressionsObservation struct {

	// Key is the label key that the selector applies to
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Operator represents a key's relationship to a set of values
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// Values is an array of string values
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type SecurityPolicySpecNamespaceSelectorMatchExpressionsParameters struct {

	// Key is the label key that the selector applies to
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Operator represents a key's relationship to a set of values
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// Values is an array of string values
	// +kubebuilder:validation:Required
	Values []*string `json:"values" tf:"values,omitempty"`
}

type SecurityPolicySpecNamespaceSelectorObservation struct {

	// Match expressions is a list of label selector requirements, the requirements are ANDed
	MatchExpressions []SecurityPolicySpecNamespaceSelectorMatchExpressionsObservation `json:"matchExpressions,omitempty" tf:"match_expressions,omitempty"`
}

type SecurityPolicySpecNamespaceSelectorParameters struct {

	// Match expressions is a list of label selector requirements, the requirements are ANDed
	// +kubebuilder:validation:Required
	MatchExpressions []SecurityPolicySpecNamespaceSelectorMatchExpressionsParameters `json:"matchExpressions" tf:"match_expressions,omitempty"`
}

type SecurityPolicySpecObservation struct {

	// Input for the security policy, having one of the valid recipes: baseline, custom or strict.
	Input []SecurityPolicySpecInputObservation `json:"input,omitempty" tf:"input,omitempty"`

	// Label based Namespace Selector for the policy
	NamespaceSelector []SecurityPolicySpecNamespaceSelectorObservation `json:"namespaceSelector,omitempty" tf:"namespace_selector,omitempty"`
}

type SecurityPolicySpecParameters struct {

	// Input for the security policy, having one of the valid recipes: baseline, custom or strict.
	// +kubebuilder:validation:Required
	Input []SecurityPolicySpecInputParameters `json:"input" tf:"input,omitempty"`

	// Label based Namespace Selector for the policy
	// +kubebuilder:validation:Optional
	NamespaceSelector []SecurityPolicySpecNamespaceSelectorParameters `json:"namespaceSelector,omitempty" tf:"namespace_selector,omitempty"`
}

type StrictObservation struct {

	// Audit (dry-run)
	Audit *bool `json:"audit,omitempty" tf:"audit,omitempty"`

	// Disable native pod security policy
	DisableNativePsp *bool `json:"disableNativePsp,omitempty" tf:"disable_native_psp,omitempty"`
}

type StrictParameters struct {

	// Audit (dry-run)
	// +kubebuilder:validation:Optional
	Audit *bool `json:"audit,omitempty" tf:"audit,omitempty"`

	// Disable native pod security policy
	// +kubebuilder:validation:Optional
	DisableNativePsp *bool `json:"disableNativePsp,omitempty" tf:"disable_native_psp,omitempty"`
}

type SupplementalGroupsObservation struct {

	// Allowed group id ranges
	Ranges []SupplementalGroupsRangesObservation `json:"ranges,omitempty" tf:"ranges,omitempty"`

	// Rule
	Rule *string `json:"rule,omitempty" tf:"rule,omitempty"`
}

type SupplementalGroupsParameters struct {

	// Allowed group id ranges
	// +kubebuilder:validation:Optional
	Ranges []SupplementalGroupsRangesParameters `json:"ranges,omitempty" tf:"ranges,omitempty"`

	// Rule
	// +kubebuilder:validation:Optional
	Rule *string `json:"rule,omitempty" tf:"rule,omitempty"`
}

type SupplementalGroupsRangesObservation struct {

	// Maximum group ID
	Max *float64 `json:"max,omitempty" tf:"max,omitempty"`

	// Minimum group ID
	Min *float64 `json:"min,omitempty" tf:"min,omitempty"`
}

type SupplementalGroupsRangesParameters struct {

	// Maximum group ID
	// +kubebuilder:validation:Optional
	Max *float64 `json:"max,omitempty" tf:"max,omitempty"`

	// Minimum group ID
	// +kubebuilder:validation:Optional
	Min *float64 `json:"min,omitempty" tf:"min,omitempty"`
}

type SysctlsObservation struct {

	// Forbidden sysctls
	ForbiddenSysctls []*string `json:"forbiddenSysctls,omitempty" tf:"forbidden_sysctls,omitempty"`
}

type SysctlsParameters struct {

	// Forbidden sysctls
	// +kubebuilder:validation:Optional
	ForbiddenSysctls []*string `json:"forbiddenSysctls,omitempty" tf:"forbidden_sysctls,omitempty"`
}

// SecurityPolicySpec defines the desired state of SecurityPolicy
type SecurityPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecurityPolicyParameters `json:"forProvider"`
}

// SecurityPolicyStatus defines the observed state of SecurityPolicy.
type SecurityPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecurityPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityPolicy is the Schema for the SecurityPolicys API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tmc}
type SecurityPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.scope)",message="scope is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.spec)",message="spec is a required parameter"
	Spec   SecurityPolicySpec   `json:"spec"`
	Status SecurityPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityPolicyList contains a list of SecurityPolicys
type SecurityPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecurityPolicy `json:"items"`
}

// Repository type metadata.
var (
	SecurityPolicy_Kind             = "SecurityPolicy"
	SecurityPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecurityPolicy_Kind}.String()
	SecurityPolicy_KindAPIVersion   = SecurityPolicy_Kind + "." + CRDGroupVersion.String()
	SecurityPolicy_GroupVersionKind = CRDGroupVersion.WithKind(SecurityPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&SecurityPolicy{}, &SecurityPolicyList{})
}
